{
  "version": 3,
  "sources": ["../../src/dom-x.ts"],
  "sourcesContent": ["type DxAppend = [dx: \"append\", selector: string, html: string];\ntype DxAttr = [dx: \"attr\", selector: string, attr: string, value: string];\ntype DxClick = [dx: \"click\", selector: string, action: string];\ntype DxCall = [\n  dx: \"call\",\n  selector: string,\n  method: string,\n  ...args: (string | number)[]\n];\ntype DxDispatch = [dx: \"dispatch\", action: string];\ntype DxGet = [dx: \"get\", url: string];\ntype DxJs = [dx: \"js\", method: string, ...args: (string | number)[]];\ntype DxPost = [\n  dx: \"post\",\n  url: string,\n  ...data: [\n    key: string,\n    selector: string,\n    val: \"value\" | \"dataset\" | \"formData\"\n  ][]\n];\ntype DxReplace = [dx: \"replace\", selector: string, content: string];\ntype DxServer = [dx: \"server\", key: string];\ntype DxState = [dx: \"state\", state: string];\ntype DxSubmit = [dx: \"submit\", selector: string, action: string];\ntype DxText = [dx: \"text\", selector: string, text: string];\ntype DxWait = [dx: \"wait\", milliseconds: number, action: string];\n\ntype DX =\n  | DxAppend\n  | DxAttr\n  | DxClick\n  | DxCall\n  | DxJs\n  | DxGet\n  | DxPost\n  | DxReplace\n  | DxServer\n  | DxState\n  | DxSubmit\n  | DxWait;\n\ntype Config = {\n  initialState: string;\n  listeners: [selector: string, event: string, action: string][];\n  states: Record<string, Record<string | \"entry\", DX[]>>;\n};\n\nexport class DomX extends HTMLElement {\n  state: string;\n  config: Config;\n  subs: ((state: string, action: string, dx: DX) => void)[] = [];\n  constructor() {\n    super();\n    this.transform = this.transform.bind(this);\n    this.applyAppend = this.applyAppend.bind(this);\n    this.applyAttr = this.applyAttr.bind(this);\n    this.applyCall = this.applyCall.bind(this);\n    this.applyEventListener = this.applyEventListener.bind(this);\n    this.applyDispatch = this.applyDispatch.bind(this);\n    this.applyGet = this.applyGet.bind(this);\n    this.applyJs = this.applyJs.bind(this);\n    this.applyPost = this.applyPost.bind(this);\n    this.applyReplace = this.applyReplace.bind(this);\n    this.applyState = this.applyState.bind(this);\n    this.applyText = this.applyText.bind(this);\n    this.applyWait = this.applyWait.bind(this);\n    this.handleClientEvent = this.handleClientEvent.bind(this);\n    this.handleServerEvent = this.handleServerEvent.bind(this);\n    this.init = this.init.bind(this);\n    this.sub = this.sub.bind(this);\n  }\n  connectedCallback() {\n    const src = this.getAttribute(\"src\");\n    if (!src) return;\n    fetch(src).then((r) => r.json().then(this.init));\n  }\n  applyAppend(transformation: DxAppend) {\n    const [, selector, html] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    const tmpl = document.createElement(\"template\");\n    tmpl.innerHTML = decodeURIComponent(html);\n    el.append(tmpl.content);\n  }\n  applyAttr(transformation: DxAttr) {\n    const [, selector, attr, value] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => {\n      if (value === null) return el.removeAttribute(attr);\n      el.setAttribute(attr, value);\n    });\n  }\n  applyCall(transformation: DxCall) {\n    const [, selector, method, ...args] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    el[method](...args);\n  }\n  applyEventListener(transformation: DxClick) {\n    const [event, selector, action] = transformation;\n    console.log(transformation);\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    for (let i = 0; i < els.length; i++) {\n      const el = els[i];\n      const cb = (e) => {\n        e.preventDefault();\n        this.handleClientEvent(action);\n      };\n      el.removeEventListener(event, cb);\n      el.addEventListener(event, cb);\n    }\n  }\n  applyDispatch(transformation: DxCall) {\n    const [, action] = transformation;\n    this.handleClientEvent(action);\n  }\n  applyGet(transformation: DxGet) {\n    const [, url] = transformation;\n    fetch(url, {\n      method: \"GET\",\n    }).then((r) => r.json().then((d) => this.transform(\"entry\", d)));\n  }\n  applyJs(transformation: DxJs) {\n    const [, method, ...args] = transformation;\n    window[method](...args);\n  }\n  applyPost(transformation: DxPost) {\n    const [, url, ...data] = transformation;\n    const body = {};\n    for (let i = 0; i < data.length; i++) {\n      const [key, selector, val] = data[i];\n      const el = this.querySelector(selector);\n      if (!el) return;\n      body[key] = el[val];\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    }).then((r) => r.json().then((d) => this.transform(\"entry\", d)));\n  }\n  applyReplace(transformation: DxReplace) {\n    const [, selector, content] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    const parent = el.parentElement;\n    if (!parent) return;\n    const tmpl = document.createElement(\"template\");\n    tmpl.innerHTML = decodeURIComponent(content);\n    parent.replaceChild(tmpl.content, el);\n  }\n  applyState(transformation: DxState) {\n    const [, state] = transformation;\n    const hasEntry = this.config.states[state].entry;\n    if (hasEntry) this.transform(\"entry\", this.config.states[state].entry);\n    this.state = state;\n  }\n  applyText(transformation: DxText) {\n    const [, selector, text] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => (el.textContent = text));\n  }\n  applyWait(transformation: DxWait) {\n    const [, timeInSeconds, action] = transformation;\n    const startTime = new Date().getTime();\n    while (new Date().getTime() - startTime < timeInSeconds) {\n      // Do nothing\n    }\n    if (action) this.handleClientEvent(action);\n  }\n  handleClientEvent(action: string) {\n    this.transform(action, this.config.states[this.state][action] as DX[]);\n  }\n  handleServerEvent(se: { action: string } & any) {\n    const { action } = se;\n    const transformations = this.config.states[this.state][action].reduce(\n      (acc, t) => {\n        const [dx, key] = t as any;\n        if (dx === \"server\") return [...acc, ...se[key]];\n        return [...acc, t];\n      },\n      [] as DX[]\n    );\n    this.transform(action, transformations);\n  }\n  init(config: Config) {\n    this.config = config;\n    const that = this;\n\n    // Apply listeners\n    const listeners = this.config.listeners ?? [];\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\" && mutation.addedNodes.length > 0) {\n          for (let i = 0; i < listeners.length; i++) {\n            const [selector, event, action] = listeners[i];\n            const els = this.querySelectorAll(\n              selector\n            ) as NodeListOf<HTMLElement>;\n            for (let j = 0; j < els.length; j++) {\n              const el = els[j];\n              const cb = (e) => {\n                e.preventDefault();\n                if (e.target !== el) return;\n                this.handleClientEvent(action);\n              };\n              that.removeEventListener(event, cb);\n              that.addEventListener(event, cb);\n            }\n          }\n        }\n      });\n    });\n\n    observer.observe(this, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    // Apply initial state\n    const initState = config.states[config.initialState];\n    this.state = config.initialState;\n    if (initState.entry) this.transform(\"entry\", initState.entry);\n  }\n  sub(s: (state: string, action: string, dx: DX) => void) {\n    this.subs.push(s);\n  }\n  transform(action: string, transformations: DX[]) {\n    if (!transformations) return;\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [trait] = transformation;\n      const traitMap = {\n        append: this.applyAppend,\n        attr: this.applyAttr,\n        click: this.applyEventListener,\n        call: this.applyCall,\n        dispatch: this.applyDispatch,\n        js: this.applyJs,\n        get: this.applyGet,\n        post: this.applyPost,\n        replace: this.applyReplace,\n        state: this.applyState,\n        submit: this.applyEventListener,\n        text: this.applyText,\n        wait: this.applyWait,\n      };\n      traitMap[trait](transformation);\n      this.subs.forEach((s) => s(this.state, action, transformation));\n    }\n  }\n}\n\ncustomElements.define(\"dom-x\", DomX);\n"],
  "mappings": "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",
  "names": []
}
