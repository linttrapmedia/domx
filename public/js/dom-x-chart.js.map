{
  "version": 3,
  "sources": ["../../node_modules/@dagrejs/graphlib/lib/graph.js", "../../node_modules/@dagrejs/graphlib/lib/version.js", "../../node_modules/@dagrejs/graphlib/lib/index.js", "../../node_modules/@dagrejs/graphlib/lib/json.js", "../../node_modules/@dagrejs/graphlib/lib/alg/components.js", "../../node_modules/@dagrejs/graphlib/lib/data/priority-queue.js", "../../node_modules/@dagrejs/graphlib/lib/alg/dijkstra.js", "../../node_modules/@dagrejs/graphlib/lib/alg/dijkstra-all.js", "../../node_modules/@dagrejs/graphlib/lib/alg/tarjan.js", "../../node_modules/@dagrejs/graphlib/lib/alg/find-cycles.js", "../../node_modules/@dagrejs/graphlib/lib/alg/floyd-warshall.js", "../../node_modules/@dagrejs/graphlib/lib/alg/topsort.js", "../../node_modules/@dagrejs/graphlib/lib/alg/is-acyclic.js", "../../node_modules/@dagrejs/graphlib/lib/alg/dfs.js", "../../node_modules/@dagrejs/graphlib/lib/alg/postorder.js", "../../node_modules/@dagrejs/graphlib/lib/alg/preorder.js", "../../node_modules/@dagrejs/graphlib/lib/alg/prim.js", "../../node_modules/@dagrejs/graphlib/lib/alg/index.js", "../../node_modules/@dagrejs/graphlib/index.js", "../../node_modules/@dagrejs/dagre/lib/data/list.js", "../../node_modules/@dagrejs/dagre/lib/greedy-fas.js", "../../node_modules/@dagrejs/dagre/lib/util.js", "../../node_modules/@dagrejs/dagre/lib/acyclic.js", "../../node_modules/@dagrejs/dagre/lib/normalize.js", "../../node_modules/@dagrejs/dagre/lib/rank/util.js", "../../node_modules/@dagrejs/dagre/lib/rank/feasible-tree.js", "../../node_modules/@dagrejs/dagre/lib/rank/network-simplex.js", "../../node_modules/@dagrejs/dagre/lib/rank/index.js", "../../node_modules/@dagrejs/dagre/lib/parent-dummy-chains.js", "../../node_modules/@dagrejs/dagre/lib/nesting-graph.js", "../../node_modules/@dagrejs/dagre/lib/add-border-segments.js", "../../node_modules/@dagrejs/dagre/lib/coordinate-system.js", "../../node_modules/@dagrejs/dagre/lib/order/init-order.js", "../../node_modules/@dagrejs/dagre/lib/order/cross-count.js", "../../node_modules/@dagrejs/dagre/lib/order/barycenter.js", "../../node_modules/@dagrejs/dagre/lib/order/resolve-conflicts.js", "../../node_modules/@dagrejs/dagre/lib/order/sort.js", "../../node_modules/@dagrejs/dagre/lib/order/sort-subgraph.js", "../../node_modules/@dagrejs/dagre/lib/order/build-layer-graph.js", "../../node_modules/@dagrejs/dagre/lib/order/add-subgraph-constraints.js", "../../node_modules/@dagrejs/dagre/lib/order/index.js", "../../node_modules/@dagrejs/dagre/lib/position/bk.js", "../../node_modules/@dagrejs/dagre/lib/position/index.js", "../../node_modules/@dagrejs/dagre/lib/layout.js", "../../node_modules/@dagrejs/dagre/lib/debug.js", "../../node_modules/@dagrejs/dagre/lib/version.js", "../../node_modules/@dagrejs/dagre/index.js", "../../src/dom-x-chart.ts"],
  "sourcesContent": ["\"use strict\";\n\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nclass Graph {\n  #isDirected = true;\n  #isMultigraph = false;\n  #isCompound = false;\n\n  // Label for the graph itself\n  #label;\n\n  // Defaults to be set when creating a new node\n  #defaultNodeLabelFn = () => undefined;\n\n  // Defaults to be set when creating a new edge\n  #defaultEdgeLabelFn = () => undefined;\n\n  // v -> label\n  #nodes = {};\n\n  // v -> edgeObj\n  #in = {};\n\n  // u -> v -> Number\n  #preds = {};\n\n  // v -> edgeObj\n  #out = {};\n\n  // v -> w -> Number\n  #sucs = {};\n\n  // e -> edgeObj\n  #edgeObjs = {};\n\n  // e -> label\n  #edgeLabels = {};\n\n  /* Number of nodes in the graph. Should only be changed by the implementation. */\n  #nodeCount = 0;\n\n  /* Number of edges in the graph. Should only be changed by the implementation. */\n  #edgeCount = 0;\n\n  #parent;\n\n  #children;\n\n  constructor(opts) {\n    if (opts) {\n      this.#isDirected = opts.hasOwnProperty(\"directed\") ? opts.directed : true;\n      this.#isMultigraph = opts.hasOwnProperty(\"multigraph\") ? opts.multigraph : false;\n      this.#isCompound = opts.hasOwnProperty(\"compound\") ? opts.compound : false;\n    }\n\n    if (this.#isCompound) {\n      // v -> parent\n      this.#parent = {};\n\n      // v -> children\n      this.#children = {};\n      this.#children[GRAPH_NODE] = {};\n    }\n  }\n\n  /* === Graph functions ========= */\n\n  /**\n   * Whether graph was created with 'directed' flag set to true or not.\n   */\n  isDirected() {\n    return this.#isDirected;\n  }\n\n  /**\n   * Whether graph was created with 'multigraph' flag set to true or not.\n   */\n  isMultigraph() {\n    return this.#isMultigraph;\n  }\n\n  /**\n   * Whether graph was created with 'compound' flag set to true or not.\n   */\n  isCompound() {\n    return this.#isCompound;\n  }\n\n  /**\n   * Sets the label of the graph.\n   */\n  setGraph(label) {\n    this.#label = label;\n    return this;\n  }\n\n  /**\n   * Gets the graph label.\n   */\n  graph() {\n    return this.#label;\n  }\n\n\n  /* === Node functions ========== */\n\n  /**\n   * Sets the default node label. If newDefault is a function, it will be\n   * invoked ach time when setting a label for a node. Otherwise, this label\n   * will be assigned as default label in case if no label was specified while\n   * setting a node.\n   * Complexity: O(1).\n   */\n  setDefaultNodeLabel(newDefault) {\n    this.#defaultNodeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultNodeLabelFn = () => newDefault;\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets the number of nodes in the graph.\n   * Complexity: O(1).\n   */\n  nodeCount() {\n    return this.#nodeCount;\n  }\n\n  /**\n   * Gets all nodes of the graph. Note, the in case of compound graph subnodes are\n   * not included in list.\n   * Complexity: O(1).\n   */\n  nodes() {\n    return Object.keys(this.#nodes);\n  }\n\n  /**\n   * Gets list of nodes without in-edges.\n   * Complexity: O(|V|).\n   */\n  sources() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#in[v]).length === 0);\n  }\n\n  /**\n   * Gets list of nodes without out-edges.\n   * Complexity: O(|V|).\n   */\n  sinks() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#out[v]).length === 0);\n  }\n\n  /**\n   * Invokes setNode method for each node in names list.\n   * Complexity: O(|names|).\n   */\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    vs.forEach(function(v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the value for the node v in the graph. If label is supplied\n   * it is set as the value for the node. If label is not supplied and the node was\n   * created by this call then the default node label will be assigned.\n   * Complexity: O(1).\n   */\n  setNode(v, value) {\n    if (this.#nodes.hasOwnProperty(v)) {\n      if (arguments.length > 1) {\n        this.#nodes[v] = value;\n      }\n      return this;\n    }\n\n    this.#nodes[v] = arguments.length > 1 ? value : this.#defaultNodeLabelFn(v);\n    if (this.#isCompound) {\n      this.#parent[v] = GRAPH_NODE;\n      this.#children[v] = {};\n      this.#children[GRAPH_NODE][v] = true;\n    }\n    this.#in[v] = {};\n    this.#preds[v] = {};\n    this.#out[v] = {};\n    this.#sucs[v] = {};\n    ++this.#nodeCount;\n    return this;\n  }\n\n  /**\n   * Gets the label of node with specified name.\n   * Complexity: O(|V|).\n   */\n  node(v) {\n    return this.#nodes[v];\n  }\n\n  /**\n   * Detects whether graph has a node with specified name or not.\n   */\n  hasNode(v) {\n    return this.#nodes.hasOwnProperty(v);\n  }\n\n  /**\n   * Remove the node with the name from the graph or do nothing if the node is not in\n   * the graph. If the node was removed this function also removes any incident\n   * edges.\n   * Complexity: O(1).\n   */\n  removeNode(v) {\n    var self = this;\n    if (this.#nodes.hasOwnProperty(v)) {\n      var removeEdge = e => self.removeEdge(self.#edgeObjs[e]);\n      delete this.#nodes[v];\n      if (this.#isCompound) {\n        this.#removeFromParentsChildList(v);\n        delete this.#parent[v];\n        this.children(v).forEach(function(child) {\n          self.setParent(child);\n        });\n        delete this.#children[v];\n      }\n      Object.keys(this.#in[v]).forEach(removeEdge);\n      delete this.#in[v];\n      delete this.#preds[v];\n      Object.keys(this.#out[v]).forEach(removeEdge);\n      delete this.#out[v];\n      delete this.#sucs[v];\n      --this.#nodeCount;\n    }\n    return this;\n  }\n\n  /**\n   * Sets node p as a parent for node v if it is defined, or removes the\n   * parent for v if p is undefined. Method throws an exception in case of\n   * invoking it in context of noncompound graph.\n   * Average-case complexity: O(1).\n   */\n  setParent(v, parent) {\n    if (!this.#isCompound) {\n      throw new Error(\"Cannot set parent in a non-compound graph\");\n    }\n\n    if (parent === undefined) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += \"\";\n      for (var ancestor = parent; ancestor !== undefined; ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error(\"Setting \" + parent+ \" as parent of \" + v +\n              \" would create a cycle\");\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this.#removeFromParentsChildList(v);\n    this.#parent[v] = parent;\n    this.#children[parent][v] = true;\n    return this;\n  }\n\n  #removeFromParentsChildList(v) {\n    delete this.#children[this.#parent[v]][v];\n  }\n\n  /**\n   * Gets parent node for node v.\n   * Complexity: O(1).\n   */\n  parent(v) {\n    if (this.#isCompound) {\n      var parent = this.#parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n\n  /**\n   * Gets list of direct children of node v.\n   * Complexity: O(1).\n   */\n  children(v = GRAPH_NODE) {\n    if (this.#isCompound) {\n      var children = this.#children[v];\n      if (children) {\n        return Object.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  predecessors(v) {\n    var predsV = this.#preds[v];\n    if (predsV) {\n      return Object.keys(predsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are successors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  successors(v) {\n    var sucsV = this.#sucs[v];\n    if (sucsV) {\n      return Object.keys(sucsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors or successors of the specified node or undefined if\n   * node v is not in the graph.\n   * Complexity: O(|V|).\n   */\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      const union = new Set(preds);\n      for (var succ of this.successors(v)) {\n        union.add(succ);\n      }\n\n      return Array.from(union.values());\n    }\n  }\n\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n\n  /**\n   * Creates new graph with nodes filtered via filter. Edges incident to rejected node\n   * are also removed. In case of compound graph, if parent is rejected by filter,\n   * than all its children are rejected too.\n   * Average-case complexity: O(|E|+|V|).\n   */\n  filterNodes(filter) {\n    var copy = new this.constructor({\n      directed: this.#isDirected,\n      multigraph: this.#isMultigraph,\n      compound: this.#isCompound\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    Object.entries(this.#nodes).forEach(function([v, value]) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    Object.values(this.#edgeObjs).forEach(function(e) {\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this.#isCompound) {\n      copy.nodes().forEach(v => copy.setParent(v, findParent(v)));\n    }\n\n    return copy;\n  }\n\n  /* === Edge functions ========== */\n\n  /**\n   * Sets the default edge label or factory function. This label will be\n   * assigned as default label in case if no label was specified while setting\n   * an edge or this function will be invoked each time when setting an edge\n   * with no label specified and returned value * will be used as a label for edge.\n   * Complexity: O(1).\n   */\n  setDefaultEdgeLabel(newDefault) {\n    this.#defaultEdgeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultEdgeLabelFn = () => newDefault;\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets the number of edges in the graph.\n   * Complexity: O(1).\n   */\n  edgeCount() {\n    return this.#edgeCount;\n  }\n\n  /**\n   * Gets edges of the graph. In case of compound graph subgraphs are not considered.\n   * Complexity: O(|E|).\n   */\n  edges() {\n    return Object.values(this.#edgeObjs);\n  }\n\n  /**\n   * Establish an edges path over the nodes in nodes list. If some edge is already\n   * exists, it will update its label, otherwise it will create an edge between pair\n   * of nodes with label provided or default label if no label provided.\n   * Complexity: O(|nodes|).\n   */\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    vs.reduce(function(v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the label for the edge (v, w) with the optionally supplied\n   * name. If label is supplied it is set as the value for the edge. If label is not\n   * supplied and the edge was created by this call then the default edge label will\n   * be assigned. The name parameter is only useful with multigraphs.\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = \"\" + v;\n    w = \"\" + w;\n    if (name !== undefined) {\n      name = \"\" + name;\n    }\n\n    var e = edgeArgsToId(this.#isDirected, v, w, name);\n    if (this.#edgeLabels.hasOwnProperty(e)) {\n      if (valueSpecified) {\n        this.#edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (name !== undefined && !this.#isMultigraph) {\n      throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    this.#edgeLabels[e] = valueSpecified ? value : this.#defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this.#isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this.#edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this.#preds[w], v);\n    incrementOrInitEntry(this.#sucs[v], w);\n    this.#in[w][e] = edgeObj;\n    this.#out[v][e] = edgeObj;\n    this.#edgeCount++;\n    return this;\n  }\n\n  /**\n   * Gets the label for the specified edge.\n   * Complexity: O(1).\n   */\n  edge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    return this.#edgeLabels[e];\n  }\n\n  /**\n   * Gets the label for the specified edge and converts it to an object.\n   * Complexity: O(1)\n   */\n  edgeAsObj() {\n    const edge = this.edge(...arguments);\n    if (typeof edge !== \"object\") {\n      return {label: edge};\n    }\n\n    return edge;\n  }\n\n  /**\n   * Detects whether the graph contains specified edge or not. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  hasEdge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    return this.#edgeLabels.hasOwnProperty(e);\n  }\n\n  /**\n   * Removes the specified edge from the graph. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  removeEdge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    var edge = this.#edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this.#edgeLabels[e];\n      delete this.#edgeObjs[e];\n      decrementOrRemoveEntry(this.#preds[w], v);\n      decrementOrRemoveEntry(this.#sucs[v], w);\n      delete this.#in[w][e];\n      delete this.#out[v][e];\n      this.#edgeCount--;\n    }\n    return this;\n  }\n\n  /**\n   * Return all edges that point to the node v. Optionally filters those edges down to just those\n   * coming from node u. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  inEdges(v, u) {\n    var inV = this.#in[v];\n    if (inV) {\n      var edges = Object.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return edges.filter(edge => edge.v === u);\n    }\n  }\n\n  /**\n   * Return all edges that are pointed at by node v. Optionally filters those edges down to just\n   * those point to w. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  outEdges(v, w) {\n    var outV = this.#out[v];\n    if (outV) {\n      var edges = Object.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return edges.filter(edge => edge.w === w);\n    }\n  }\n\n  /**\n   * Returns all edges to or from node v regardless of direction. Optionally filters those edges\n   * down to just those between nodes v and w regardless of direction.\n   * Complexity: O(|E|).\n   */\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) { delete map[k]; }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +\n             (name === undefined ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj =  { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n\nmodule.exports = Graph;\n", "module.exports = '2.1.13';\n", "// Includes only the \"core\" of graphlib\nmodule.exports = {\n  Graph: require(\"./graph\"),\n  version: require(\"./version\")\n};\n", "var Graph = require(\"./graph\");\n\nmodule.exports = {\n  write: write,\n  read: read\n};\n\n/**\n * Creates a JSON representation of the graph that can be serialized to a string with\n * JSON.stringify. The graph can later be restored using json.read.\n */\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound()\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g)\n  };\n\n  if (g.graph() !== undefined) {\n    json.value = structuredClone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return g.nodes().map(function(v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (nodeValue !== undefined) {\n      node.value = nodeValue;\n    }\n    if (parent !== undefined) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return g.edges().map(function(e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (e.name !== undefined) {\n      edge.name = e.name;\n    }\n    if (edgeValue !== undefined) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\n/**\n * Takes JSON as input and returns the graph representation.\n *\n * @example\n * var g2 = graphlib.json.read(JSON.parse(str));\n * g2.nodes();\n * // ['a', 'b']\n * g2.edges()\n * // [ { v: 'a', w: 'b' } ]\n */\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  json.nodes.forEach(function(entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  json.edges.forEach(function(entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n", "module.exports = components;\n\nfunction components(g) {\n  var visited = {};\n  var cmpts = [];\n  var cmpt;\n\n  function dfs(v) {\n    if (visited.hasOwnProperty(v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    g.successors(v).forEach(dfs);\n    g.predecessors(v).forEach(dfs);\n  }\n\n  g.nodes().forEach(function(v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n", "/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nclass PriorityQueue {\n  #arr = [];\n  #keyIndices = {};\n\n  /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */\n  size() {\n    return this.#arr.length;\n  }\n\n  /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */\n  keys() {\n    return this.#arr.map(function(x) { return x.key; });\n  }\n\n  /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */\n  has(key) {\n    return this.#keyIndices.hasOwnProperty(key);\n  }\n\n  /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */\n  priority(key) {\n    var index = this.#keyIndices[key];\n    if (index !== undefined) {\n      return this.#arr[index].priority;\n    }\n  }\n\n  /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */\n  min() {\n    if (this.size() === 0) {\n      throw new Error(\"Queue underflow\");\n    }\n    return this.#arr[0].key;\n  }\n\n  /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */\n  add(key, priority) {\n    var keyIndices = this.#keyIndices;\n    key = String(key);\n    if (!keyIndices.hasOwnProperty(key)) {\n      var arr = this.#arr;\n      var index = arr.length;\n      keyIndices[key] = index;\n      arr.push({key: key, priority: priority});\n      this.#decrease(index);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */\n  removeMin() {\n    this.#swap(0, this.#arr.length - 1);\n    var min = this.#arr.pop();\n    delete this.#keyIndices[min.key];\n    this.#heapify(0);\n    return min.key;\n  }\n\n  /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */\n  decrease(key, priority) {\n    var index = this.#keyIndices[key];\n    if (priority > this.#arr[index].priority) {\n      throw new Error(\"New priority is greater than current priority. \" +\n          \"Key: \" + key + \" Old: \" + this.#arr[index].priority + \" New: \" + priority);\n    }\n    this.#arr[index].priority = priority;\n    this.#decrease(index);\n  }\n\n  #heapify(i) {\n    var arr = this.#arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n    if (l < arr.length) {\n      largest = arr[l].priority < arr[largest].priority ? l : largest;\n      if (r < arr.length) {\n        largest = arr[r].priority < arr[largest].priority ? r : largest;\n      }\n      if (largest !== i) {\n        this.#swap(i, largest);\n        this.#heapify(largest);\n      }\n    }\n  }\n\n  #decrease(index) {\n    var arr = this.#arr;\n    var priority = arr[index].priority;\n    var parent;\n    while (index !== 0) {\n      parent = index >> 1;\n      if (arr[parent].priority < priority) {\n        break;\n      }\n      this.#swap(index, parent);\n      index = parent;\n    }\n  }\n\n  #swap(i, j) {\n    var arr = this.#arr;\n    var keyIndices = this.#keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n  }\n}\n\nmodule.exports = PriorityQueue;\n", "var PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = () => 1;\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n", "var dijkstra = require(\"./dijkstra\");\n\nmodule.exports = dijkstraAll;\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return g.nodes().reduce(function(acc, v) {\n    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n    return acc;\n  }, {});\n}\n", "module.exports = tarjan;\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++\n    };\n    stack.push(v);\n\n    g.successors(v).forEach(function(w) {\n      if (!visited.hasOwnProperty(w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function(v) {\n    if (!visited.hasOwnProperty(v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n", "var tarjan = require(\"./tarjan\");\n\nmodule.exports = findCycles;\n\nfunction findCycles(g) {\n  return tarjan(g).filter(function(cmpt) {\n    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));\n  });\n}\n", "module.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = () => 1;\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n", "function topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (stack.hasOwnProperty(node)) {\n      throw new CycleException();\n    }\n\n    if (!visited.hasOwnProperty(node)) {\n      stack[node] = true;\n      visited[node] = true;\n      g.predecessors(node).forEach(visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  g.sinks().forEach(visit);\n\n  if (Object.keys(visited).length !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nclass CycleException extends Error {\n  constructor() {\n    super(...arguments);\n  }\n}\n\nmodule.exports = topsort;\ntopsort.CycleException = CycleException;\n", "var topsort = require(\"./topsort\");\n\nmodule.exports = isAcyclic;\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof topsort.CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n", "module.exports = dfs;\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * If the order is not \"post\", it will be treated as \"pre\".\n */\nfunction dfs(g, vs, order) {\n  if (!Array.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = g.isDirected() ? v => g.successors(v) : v => g.neighbors(v);\n  var orderFunc = order === \"post\" ? postOrderDfs : preOrderDfs;\n\n  var acc = [];\n  var visited = {};\n  vs.forEach(v => {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n\n    orderFunc(v, navigation, visited, acc);\n  });\n\n  return acc;\n}\n\nfunction postOrderDfs(v, navigation, visited, acc) {\n  var stack = [[v, false]];\n  while (stack.length > 0) {\n    var curr = stack.pop();\n    if (curr[1]) {\n      acc.push(curr[0]);\n    } else {\n      if (!visited.hasOwnProperty(curr[0])) {\n        visited[curr[0]] = true;\n        stack.push([curr[0], true]);\n        forEachRight(navigation(curr[0]), w => stack.push([w, false]));\n      }\n    }\n  }\n}\n\nfunction preOrderDfs(v, navigation, visited, acc) {\n  var stack = [v];\n  while (stack.length > 0) {\n    var curr = stack.pop();\n    if (!visited.hasOwnProperty(curr)) {\n      visited[curr] = true;\n      acc.push(curr);\n      forEachRight(navigation(curr), w => stack.push(w));\n    }\n  }\n}\n\nfunction forEachRight(array, iteratee) {\n  var length = array.length;\n  while (length--) {\n    iteratee(array[length], length, array);\n  }\n\n  return array;\n}\n", "var dfs = require(\"./dfs\");\n\nmodule.exports = postorder;\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, \"post\");\n}\n", "var dfs = require(\"./dfs\");\n\nmodule.exports = preorder;\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, \"pre\");\n}\n", "var Graph = require(\"../graph\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  g.nodes().forEach(function(v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (parents.hasOwnProperty(v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n", "module.exports = {\n  components: require(\"./components\"),\n  dijkstra: require(\"./dijkstra\"),\n  dijkstraAll: require(\"./dijkstra-all\"),\n  findCycles: require(\"./find-cycles\"),\n  floydWarshall: require(\"./floyd-warshall\"),\n  isAcyclic: require(\"./is-acyclic\"),\n  postorder: require(\"./postorder\"),\n  preorder: require(\"./preorder\"),\n  prim: require(\"./prim\"),\n  tarjan: require(\"./tarjan\"),\n  topsort: require(\"./topsort\")\n};\n", "/**\n * Copyright (c) 2014, Chris Pettitt\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar lib = require(\"./lib\");\n\nmodule.exports = {\n  Graph: lib.Graph,\n  json: require(\"./lib/json\"),\n  alg: require(\"./lib/alg\"),\n  version: lib.version\n};\n", "/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nclass List {\n  constructor() {\n    let sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n\n  dequeue() {\n    let sentinel = this._sentinel;\n    let entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n\n  enqueue(entry) {\n    let sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n\n  toString() {\n    let strs = [];\n    let sentinel = this._sentinel;\n    let curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return \"[\" + strs.join(\", \") + \"]\";\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n}\n\nmodule.exports = List;\n", "let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\n\nlet DEFAULT_WEIGHT_FN = () => 1;\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  let state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  let results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return results.flatMap(e => g.outEdges(e.v, e.w));\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  let results = [];\n  let sources = buckets[buckets.length - 1];\n  let sinks = buckets[0];\n\n  let entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }\n    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  let results = collectPredecessors ? [] : undefined;\n\n  g.inEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  g.outEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let w = edge.w;\n    let wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  let fasGraph = new Graph();\n  let maxIn = 0;\n  let maxOut = 0;\n\n  g.nodes().forEach(v => {\n    fasGraph.setNode(v, { v: v, \"in\": 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  g.edges().forEach(e => {\n    let prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    let weight = weightFn(e);\n    let edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)[\"in\"]  += weight);\n  });\n\n  let buckets = range(maxOut + maxIn + 3).map(() => new List());\n  let zeroIdx = maxIn + 1;\n\n  fasGraph.nodes().forEach(v => {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\n\nfunction range(limit) {\n  const range = [];\n  for (let i = 0; i < limit; i++) {\n    range.push(i);\n  }\n\n  return range;\n}\n", "/* eslint \"no-console\": off */\n\n\"use strict\";\n\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\n\nmodule.exports = {\n  addBorderNode,\n  addDummyNode,\n  asNonCompoundGraph,\n  buildLayerMatrix,\n  intersectRect,\n  mapValues,\n  maxRank,\n  normalizeRanks,\n  notime,\n  partition,\n  pick,\n  predecessorWeights,\n  range,\n  removeEmptyRanks,\n  simplify,\n  successorWeights,\n  time,\n  uniqueId,\n  zipObject,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  let v;\n  do {\n    v = uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  let simplified = new Graph().setGraph(g.graph());\n  g.nodes().forEach(v => simplified.setNode(v, g.node(v)));\n  g.edges().forEach(e => {\n    let simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    let label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  let simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  g.nodes().forEach(v => {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  g.edges().forEach(e => {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  let weightMap = g.nodes().map(v => {\n    let sucs = {};\n    g.outEdges(v).forEach(e => {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  let weightMap = g.nodes().map(v => {\n    let preds = {};\n    g.inEdges(v).forEach(e => {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  let x = rect.x;\n  let y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  let dx = point.x - x;\n  let dy = point.y - y;\n  let w = rect.width / 2;\n  let h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n\n  let sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  let layering = range(maxRank(g) + 1).map(() => []);\n  g.nodes().forEach(v => {\n    let node = g.node(v);\n    let rank = node.rank;\n    if (rank !== undefined) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  let min = Math.min(...g.nodes().map(v => {\n    let rank = g.node(v).rank;\n    if (rank === undefined) {\n      return Number.MAX_VALUE;\n    }\n\n    return rank;\n  }));\n  g.nodes().forEach(v => {\n    let node = g.node(v);\n    if (node.hasOwnProperty(\"rank\")) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  let offset = Math.min(...g.nodes().map(v => g.node(v).rank));\n\n  let layers = [];\n  g.nodes().forEach(v => {\n    let rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  let delta = 0;\n  let nodeRankFactor = g.graph().nodeRankFactor;\n  Array.from(layers).forEach((vs, i) => {\n    if (vs === undefined && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (vs !== undefined && delta) {\n      vs.forEach(v => g.node(v).rank += delta);\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  let node = {\n    width: 0,\n    height: 0\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, \"border\", node, prefix);\n}\n\nfunction maxRank(g) {\n  return Math.max(...g.nodes().map(v => {\n    let rank = g.node(v).rank;\n    if (rank === undefined) {\n      return Number.MIN_VALUE;\n    }\n\n    return rank;\n  }));\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  let result = { lhs: [], rhs: [] };\n  collection.forEach(value => {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  let start = Date.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + \" time: \" + (Date.now() - start) + \"ms\");\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n\nlet idCounter = 0;\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nfunction range(start, limit, step = 1) {\n  if (limit == null) {\n    limit = start;\n    start = 0;\n  }\n\n  let endCon = (i) => i < limit;\n  if (step < 0) {\n    endCon = (i) => limit < i;\n  }\n\n  const range = [];\n  for (let i = start; endCon(i); i += step) {\n    range.push(i);\n  }\n\n  return range;\n}\n\nfunction pick(source, keys) {\n  const dest = {};\n  for (const key of keys) {\n    if (source[key] !== undefined) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n\nfunction mapValues(obj, funcOrProp) {\n  let func = funcOrProp;\n  if (typeof funcOrProp === 'string') {\n    func = (val) => val[funcOrProp];\n  }\n\n  return Object.entries(obj).reduce((acc, [k, v]) => {\n    acc[k] = func(v, k);\n    return acc;\n  }, {});\n}\n\nfunction zipObject(props, values) {\n  return props.reduce((acc, key, i) => {\n    acc[key] = values[i];\n    return acc;\n  }, {});\n}\n", "\"use strict\";\n\nlet greedyFAS = require(\"./greedy-fas\");\nlet uniqueId = require(\"./util\").uniqueId;\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\nfunction run(g) {\n  let fas = (g.graph().acyclicer === \"greedy\"\n    ? greedyFAS(g, weightFn(g))\n    : dfsFAS(g));\n  fas.forEach(e => {\n    let label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, uniqueId(\"rev\"));\n  });\n\n  function weightFn(g) {\n    return e => {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  let fas = [];\n  let stack = {};\n  let visited = {};\n\n  function dfs(v) {\n    if (visited.hasOwnProperty(v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    g.outEdges(v).forEach(e => {\n      if (stack.hasOwnProperty(e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  g.nodes().forEach(dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  g.edges().forEach(e => {\n    let label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      let forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n", "\"use strict\";\n\nlet util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  g.edges().forEach(edge => normalizeEdge(g, edge));\n}\n\nfunction normalizeEdge(g, e) {\n  let v = e.v;\n  let vRank = g.node(v).rank;\n  let w = e.w;\n  let wRank = g.node(w).rank;\n  let name = e.name;\n  let edgeLabel = g.edge(e);\n  let labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  let dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0, height: 0,\n      edgeLabel: edgeLabel, edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  g.graph().dummyChains.forEach(v => {\n    let node = g.node(v);\n    let origLabel = node.edgeLabel;\n    let w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n", "\"use strict\";\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = Math.min(...g.outEdges(v).map(e => {\n      if (e == null) {\n        return Number.POSITIVE_INFINITY;\n      }\n\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY) {\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  g.sources().forEach(dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n", "\"use strict\";\n\nvar Graph = require(\"@dagrejs/graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    g.nodeEdges(v).forEach(e => {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  t.nodes().forEach(dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  const edges = g.edges();\n\n  return edges.reduce((acc, edge) => {\n    let edgeSlack = Number.POSITIVE_INFINITY;\n    if (t.hasNode(edge.v) !== t.hasNode(edge.w)) {\n      edgeSlack = slack(g, edge);\n    }\n\n    if (edgeSlack < acc[0]) {\n      return [edgeSlack, edge];\n    }\n\n    return acc;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\n\nfunction shiftRanks(t, g, delta) {\n  t.nodes().forEach(v => g.node(v).rank += delta);\n}\n", "\"use strict\";\n\nvar feasibleTree = require(\"./feasible-tree\");\nvar slack = require(\"./util\").slack;\nvar initRank = require(\"./util\").longestPath;\nvar preorder = require(\"@dagrejs/graphlib\").alg.preorder;\nvar postorder = require(\"@dagrejs/graphlib\").alg.postorder;\nvar simplify = require(\"../util\").simplify;\n\nmodule.exports = networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  vs.forEach(v => assignCutValue(t, g, v));\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  g.nodeEdges(child).forEach(e => {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  tree.neighbors(v).forEach(w => {\n    if (!visited.hasOwnProperty(w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return tree.edges().find(e => tree.edge(e).cutvalue < 0);\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = g.edges().filter(edge => {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n           flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return candidates.reduce((acc, edge) => {\n    if (slack(g, edge) < slack(g, acc)) {\n      return edge;\n    }\n\n    return acc;\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = t.nodes().find(v => !g.node(v).parent);\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  vs.forEach(v => {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n", "\"use strict\";\n\nvar rankUtil = require(\"./util\");\nvar longestPath = rankUtil.longestPath;\nvar feasibleTree = require(\"./feasible-tree\");\nvar networkSimplex = require(\"./network-simplex\");\n\nmodule.exports = rank;\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch(g.graph().ranker) {\n  case \"network-simplex\": networkSimplexRanker(g); break;\n  case \"tight-tree\": tightTreeRanker(g); break;\n  case \"longest-path\": longestPathRanker(g); break;\n  default: networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n", "module.exports = parentDummyChains;\n\nfunction parentDummyChains(g) {\n  let postorderNums = postorder(g);\n\n  g.graph().dummyChains.forEach(v => {\n    let node = g.node(v);\n    let edgeObj = node.edgeObj;\n    let pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    let path = pathData.path;\n    let lca = pathData.lca;\n    let pathIdx = 0;\n    let pathV = path[pathIdx];\n    let ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca &&\n               g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 &&\n               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  let vPath = [];\n  let wPath = [];\n  let low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  let lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  let parent;\n  let lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent &&\n           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  let result = {};\n  let lim = 0;\n\n  function dfs(v) {\n    let low = lim;\n    g.children(v).forEach(dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  g.children().forEach(dfs);\n\n  return result;\n}\n", "let util = require(\"./util\");\n\nmodule.exports = {\n  run,\n  cleanup,\n};\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundaries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  let root = util.addDummyNode(g, \"root\", {}, \"_root\");\n  let depths = treeDepths(g);\n  let height = Math.max(...Object.values(depths)) - 1; // Note: depths is an Object not an array\n  let nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  g.edges().forEach(e => g.edge(e).minlen *= nodeSep);\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  let weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  g.children().forEach(child => dfs(g, root, nodeSep, weight, height, depths, child));\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  let children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  let top = util.addBorderNode(g, \"_bt\");\n  let bottom = util.addBorderNode(g, \"_bb\");\n  let label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  children.forEach(child => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    let childNode = g.node(child);\n    let childTop = childNode.borderTop ? childNode.borderTop : child;\n    let childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    let thisWeight = childNode.borderTop ? weight : 2 * weight;\n    let minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      children.forEach(child => dfs(child, depth + 1));\n    }\n    depths[v] = depth;\n  }\n  g.children().forEach(v => dfs(v, 1));\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return g.edges().reduce((acc, e) => acc + g.edge(e).weight, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach(e => {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n", "let util = require(\"./util\");\n\nmodule.exports = addBorderSegments;\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    let children = g.children(v);\n    let node = g.node(v);\n    if (children.length) {\n      children.forEach(dfs);\n    }\n\n    if (node.hasOwnProperty(\"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (let rank = node.minRank, maxRank = node.maxRank + 1;\n        rank < maxRank;\n        ++rank) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  }\n\n  g.children().forEach(dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  let label = { width: 0, height: 0, rank: rank, borderType: prop };\n  let prev = sgNode[prop][rank - 1];\n  let curr = util.addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n", "\"use strict\";\n\nmodule.exports = {\n  adjust: adjust,\n  undo: undo\n};\n\nfunction adjust(g) {\n  let rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  let rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"bt\" || rankDir === \"rl\") {\n    reverseY(g);\n  }\n\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  g.nodes().forEach(v => swapWidthHeightOne(g.node(v)));\n  g.edges().forEach(e => swapWidthHeightOne(g.edge(e)));\n}\n\nfunction swapWidthHeightOne(attrs) {\n  let w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  g.nodes().forEach(v => reverseYOne(g.node(v)));\n\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    edge.points.forEach(reverseYOne);\n    if (edge.hasOwnProperty(\"y\")) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  g.nodes().forEach(v => swapXYOne(g.node(v)));\n\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    edge.points.forEach(swapXYOne);\n    if (edge.hasOwnProperty(\"x\")) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  let x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n", "\"use strict\";\n\nlet util = require(\"../util\");\n\nmodule.exports = initOrder;\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  let visited = {};\n  let simpleNodes = g.nodes().filter(v => !g.children(v).length);\n  let maxRank = Math.max(...simpleNodes.map(v => g.node(v).rank));\n  let layers = util.range(maxRank + 1).map(() => []);\n\n  function dfs(v) {\n    if (visited[v]) return;\n    visited[v] = true;\n    let node = g.node(v);\n    layers[node.rank].push(v);\n    g.successors(v).forEach(dfs);\n  }\n\n  let orderedVs = simpleNodes.sort((a, b) => g.node(a).rank - g.node(b).rank);\n  orderedVs.forEach(dfs);\n\n  return layers;\n}\n", "\"use strict\";\n\nlet zipObject = require(\"../util\").zipObject;\n\nmodule.exports = crossCount;\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  let cc = 0;\n  for (let i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  let southPos = zipObject(southLayer, southLayer.map((v, i) => i));\n  let southEntries = northLayer.flatMap(v => {\n    return g.outEdges(v).map(e => {\n      return { pos: southPos[e.w], weight: g.edge(e).weight };\n    }).sort((a, b) => a.pos - b.pos);\n  });\n\n  // Build the accumulator tree\n  let firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  let treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  let tree = new Array(treeSize).fill(0);\n\n  // Calculate the weighted crossings\n  let cc = 0;\n  southEntries.forEach(entry => {\n    let index = entry.pos + firstIndex;\n    tree[index] += entry.weight;\n    let weightSum = 0;\n    while (index > 0) {\n      if (index % 2) {\n        weightSum += tree[index + 1];\n      }\n      index = (index - 1) >> 1;\n      tree[index] += entry.weight;\n    }\n    cc += entry.weight * weightSum;\n  });\n\n  return cc;\n}\n", "module.exports = barycenter;\n\nfunction barycenter(g, movable = []) {\n  return movable.map(v => {\n    let inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      let result = inV.reduce((acc, e) => {\n        let edge = g.edge(e),\n          nodeU = g.node(e.v);\n        return {\n          sum: acc.sum + (edge.weight * nodeU.order),\n          weight: acc.weight + edge.weight\n        };\n      }, { sum: 0, weight: 0 });\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight\n      };\n    }\n  });\n}\n\n", "\"use strict\";\n\nlet util = require(\"../util\");\n\nmodule.exports = resolveConflicts;\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  let mappedEntries = {};\n  entries.forEach((entry, i) => {\n    let tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v],\n      i: i\n    };\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  cg.edges().forEach(e => {\n    let entryV = mappedEntries[e.v];\n    let entryW = mappedEntries[e.w];\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  let sourceSet = Object.values(mappedEntries).filter(entry => !entry.indegree);\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  let entries = [];\n\n  function handleIn(vEntry) {\n    return uEntry => {\n      if (uEntry.merged) {\n        return;\n      }\n      if (uEntry.barycenter === undefined ||\n          vEntry.barycenter === undefined ||\n          uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return wEntry => {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    let entry = sourceSet.pop();\n    entries.push(entry);\n    entry[\"in\"].reverse().forEach(handleIn(entry));\n    entry.out.forEach(handleOut(entry));\n  }\n\n  return entries.filter(entry => !entry.merged).map(entry => {\n    return util.pick(entry, [\"vs\", \"i\", \"barycenter\", \"weight\"]);\n  });\n}\n\nfunction mergeEntries(target, source) {\n  let sum = 0;\n  let weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n", "let util = require(\"../util\");\n\nmodule.exports = sort;\n\nfunction sort(entries, biasRight) {\n  let parts = util.partition(entries, entry => {\n    return entry.hasOwnProperty(\"barycenter\");\n  });\n  let sortable = parts.lhs,\n    unsortable = parts.rhs.sort((a, b) => b.i - a.i),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  sortable.forEach(entry => {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  let result = { vs: vs.flat(true) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  let last;\n  while (unsortable.length && (last = unsortable[unsortable.length - 1]).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return (entryV, entryW) => {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n", "let barycenter = require(\"./barycenter\");\nlet resolveConflicts = require(\"./resolve-conflicts\");\nlet sort = require(\"./sort\");\n\nmodule.exports = sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  let movable = g.children(v);\n  let node = g.node(v);\n  let bl = node ? node.borderLeft : undefined;\n  let br = node ? node.borderRight: undefined;\n  let subgraphs = {};\n\n  if (bl) {\n    movable = movable.filter(w => w !== bl && w !== br);\n  }\n\n  let barycenters = barycenter(g, movable);\n  barycenters.forEach(entry => {\n    if (g.children(entry.v).length) {\n      let subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (subgraphResult.hasOwnProperty(\"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  let entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  let result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = [bl, result.vs, br].flat(true);\n    if (g.predecessors(bl).length) {\n      let blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!result.hasOwnProperty(\"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter = (result.barycenter * result.weight +\n                           blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  entries.forEach(entry => {\n    entry.vs = entry.vs.flatMap(v => {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n      return v;\n    });\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (target.barycenter !== undefined) {\n    target.barycenter = (target.barycenter * target.weight +\n                         other.barycenter * other.weight) /\n                        (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n", "let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  let root = createRootNode(g),\n    result = new Graph({ compound: true }).setGraph({ root: root })\n      .setDefaultNodeLabel(v => g.node(v));\n\n  g.nodes().forEach(v => {\n    let node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      g[relationship](v).forEach(e => {\n        let u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = util.uniqueId(\"_root\"))));\n  return v;\n}\n", "module.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  let prev = {},\n    rootPrev;\n\n  vs.forEach(v => {\n    let child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      children.forEach(function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.sortBy(subgraphs, \"order\").reduce(function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n", "\"use strict\";\n\nlet initOrder = require(\"./init-order\");\nlet crossCount = require(\"./cross-count\");\nlet sortSubgraph = require(\"./sort-subgraph\");\nlet buildLayerGraph = require(\"./build-layer-graph\");\nlet addSubgraphConstraints = require(\"./add-subgraph-constraints\");\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\nmodule.exports = order;\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  let maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, util.range(1, maxRank + 1), \"inEdges\"),\n    upLayerGraphs = buildLayerGraphs(g, util.range(maxRank - 1, -1, -1), \"outEdges\");\n\n  let layering = initOrder(g);\n  assignOrder(g, layering);\n\n  let bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    let cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = Object.assign({}, layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return ranks.map(function(rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  let cg = new Graph();\n  layerGraphs.forEach(function(lg) {\n    let root = lg.graph().root;\n    let sorted = sortSubgraph(lg, root, cg, biasRight);\n    sorted.vs.forEach((v, i) => lg.node(v).order = i);\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  Object.values(layering).forEach(layer => layer.forEach((v, i) => g.node(v).order = i));\n}\n", "\"use strict\";\n\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and K\u00F6pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  let conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    let\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = layer[layer.length - 1];\n\n    layer.forEach((v, i) => {\n      let w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        layer.slice(scanPos, i+1).forEach(scanNode => {\n          g.predecessors(scanNode).forEach(u => {\n            let uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  layering.reduce(visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  let conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    let v;\n    util.range(southPos, southEnd).forEach(i => {\n      v = south[i];\n      if (g.node(v).dummy) {\n        g.predecessors(v).forEach(u => {\n          let uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    let prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    south.forEach((v, southLookahead) => {\n      if (g.node(v).dummy === \"border\") {\n        let predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  layering.reduce(visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return g.predecessors(v).find(u => g.node(u).dummy);\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  let conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && conflicts[v].hasOwnProperty(w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  let root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  layering.forEach(layer => {\n    layer.forEach((v, order) => {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  layering.forEach(layer => {\n    let prevIdx = -1;\n    layer.forEach(v => {\n      let ws = neighborFn(v);\n      if (ws.length) {\n        ws = ws.sort((a, b) => pos[a] - pos[b]);\n        let mp = (ws.length - 1) / 2;\n        for (let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          let w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  let xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    let stack = blockG.nodes();\n    let elem = stack.pop();\n    let visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce((acc, e) => {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    let min = blockG.outEdges(elem).reduce((acc, e) => {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    let node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  Object.keys(align).forEach(v => xs[v] = xs[root[v]]);\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  let blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  layering.forEach(layer => {\n    let u;\n    layer.forEach(v => {\n      let vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return Object.values(xss).reduce((currentMinAndXs, xs) => {\n    let max = Number.NEGATIVE_INFINITY;\n    let min = Number.POSITIVE_INFINITY;\n\n    Object.entries(xs).forEach(([v, x]) => {\n      let halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    const newMin = max - min;\n    if (newMin < currentMinAndXs[0]) {\n      currentMinAndXs = [newMin, xs];\n    }\n    return currentMinAndXs;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  let alignToVals = Object.values(alignTo),\n    alignToMin = Math.min(...alignToVals),\n    alignToMax = Math.max(...alignToVals);\n\n  [\"u\", \"d\"].forEach(vert => {\n    [\"l\", \"r\"].forEach(horiz => {\n      let alignment = vert + horiz,\n        xs = xss[alignment];\n\n      if (xs === alignTo) return;\n\n      let xsVals = Object.values(xs);\n      let delta = alignToMin - Math.min(...xsVals);\n      if (horiz !== \"l\") {\n        delta = alignToMax - Math.max(...xsVals);\n      }\n\n      if (delta) {\n        xss[alignment] = util.mapValues(xs, x => x + delta);\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return util.mapValues(xss.ul, (num, v) => {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      let xs = Object.values(xss).map(xs => xs[v]).sort((a, b) => a - b);\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  let layering = util.buildLayerMatrix(g);\n  let conflicts = Object.assign(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  let xss = {};\n  let adjustedLayering;\n  [\"u\", \"d\"].forEach(vert => {\n    adjustedLayering = vert === \"u\" ? layering : Object.values(layering).reverse();\n    [\"l\", \"r\"].forEach(horiz => {\n      if (horiz === \"r\") {\n        adjustedLayering = adjustedLayering.map(inner => {\n          return Object.values(inner).reverse();\n        });\n      }\n\n      let neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      let align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      let xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = util.mapValues(xs, x => -x);\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n\n  let smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return (g, v, w) => {\n    let vLabel = g.node(v);\n    let wLabel = g.node(w);\n    let sum = 0;\n    let delta;\n\n    sum += vLabel.width / 2;\n    if (vLabel.hasOwnProperty(\"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (wLabel.hasOwnProperty(\"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n", "\"use strict\";\n\nlet util = require(\"../util\");\nlet positionX = require(\"./bk\").positionX;\n\nmodule.exports = position;\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  Object.entries(positionX(g)).forEach(([v, x]) => g.node(v).x = x);\n}\n\nfunction positionY(g) {\n  let layering = util.buildLayerMatrix(g);\n  let rankSep = g.graph().ranksep;\n  let prevY = 0;\n  layering.forEach(layer => {\n    const maxHeight = layer.reduce((acc, v) => {\n      const height = g.node(v).height;\n      if (acc > height) {\n        return acc;\n      } else {\n        return height;\n      }\n    }, 0);\n    layer.forEach(v => g.node(v).y = prevY + maxHeight / 2);\n    prevY += maxHeight + rankSep;\n  });\n}\n\n", "\"use strict\";\n\nlet acyclic = require(\"./acyclic\");\nlet normalize = require(\"./normalize\");\nlet rank = require(\"./rank\");\nlet normalizeRanks = require(\"./util\").normalizeRanks;\nlet parentDummyChains = require(\"./parent-dummy-chains\");\nlet removeEmptyRanks = require(\"./util\").removeEmptyRanks;\nlet nestingGraph = require(\"./nesting-graph\");\nlet addBorderSegments = require(\"./add-border-segments\");\nlet coordinateSystem = require(\"./coordinate-system\");\nlet order = require(\"./order\");\nlet position = require(\"./position\");\nlet util = require(\"./util\");\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\n\nmodule.exports = layout;\n\nfunction layout(g, opts) {\n  let time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", () => {\n    let layoutGraph =\n      time(\"  buildLayoutGraph\", () => buildLayoutGraph(g));\n    time(\"  runLayout\",        () => runLayout(layoutGraph, time));\n    time(\"  updateInputGraph\", () => updateInputGraph(g, layoutGraph));\n  });\n}\n\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", () => makeSpaceForEdgeLabels(g));\n  time(\"    removeSelfEdges\",        () => removeSelfEdges(g));\n  time(\"    acyclic\",                () => acyclic.run(g));\n  time(\"    nestingGraph.run\",       () => nestingGraph.run(g));\n  time(\"    rank\",                   () => rank(util.asNonCompoundGraph(g)));\n  time(\"    injectEdgeLabelProxies\", () => injectEdgeLabelProxies(g));\n  time(\"    removeEmptyRanks\",       () => removeEmptyRanks(g));\n  time(\"    nestingGraph.cleanup\",   () => nestingGraph.cleanup(g));\n  time(\"    normalizeRanks\",         () => normalizeRanks(g));\n  time(\"    assignRankMinMax\",       () => assignRankMinMax(g));\n  time(\"    removeEdgeLabelProxies\", () => removeEdgeLabelProxies(g));\n  time(\"    normalize.run\",          () => normalize.run(g));\n  time(\"    parentDummyChains\",      () => parentDummyChains(g));\n  time(\"    addBorderSegments\",      () => addBorderSegments(g));\n  time(\"    order\",                  () => order(g));\n  time(\"    insertSelfEdges\",        () => insertSelfEdges(g));\n  time(\"    adjustCoordinateSystem\", () => coordinateSystem.adjust(g));\n  time(\"    position\",               () => position(g));\n  time(\"    positionSelfEdges\",      () => positionSelfEdges(g));\n  time(\"    removeBorderNodes\",      () => removeBorderNodes(g));\n  time(\"    normalize.undo\",         () => normalize.undo(g));\n  time(\"    fixupEdgeLabelCoords\",   () => fixupEdgeLabelCoords(g));\n  time(\"    undoCoordinateSystem\",   () => coordinateSystem.undo(g));\n  time(\"    translateGraph\",         () => translateGraph(g));\n  time(\"    assignNodeIntersects\",   () => assignNodeIntersects(g));\n  time(\"    reversePoints\",          () => reversePointsForReversedEdges(g));\n  time(\"    acyclic.undo\",           () => acyclic.undo(g));\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  inputGraph.nodes().forEach(v => {\n    let inputLabel = inputGraph.node(v);\n    let layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n      inputLabel.rank = layoutLabel.rank;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  inputGraph.edges().forEach(e => {\n    let inputLabel = inputGraph.edge(e);\n    let layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (layoutLabel.hasOwnProperty(\"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nlet graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nlet graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\nlet graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nlet nodeNumAttrs = [\"width\", \"height\"];\nlet nodeDefaults = { width: 0, height: 0 };\nlet edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nlet edgeDefaults = {\n  minlen: 1, weight: 1, width: 0, height: 0,\n  labeloffset: 10, labelpos: \"r\"\n};\nlet edgeAttrs = [\"labelpos\"];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  let g = new Graph({ multigraph: true, compound: true });\n  let graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(Object.assign({},\n    graphDefaults,\n    selectNumberAttrs(graph, graphNumAttrs),\n    util.pick(graph, graphAttrs)));\n\n  inputGraph.nodes().forEach(v => {\n    let node = canonicalize(inputGraph.node(v));\n    const newNode = selectNumberAttrs(node, nodeNumAttrs);\n    Object.keys(nodeDefaults).forEach(k => {\n      if (newNode[k] === undefined) {\n        newNode[k] = nodeDefaults[k];\n      }\n    });\n\n    g.setNode(v, newNode);\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  inputGraph.edges().forEach(e => {\n    let edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(e, Object.assign({},\n      edgeDefaults,\n      selectNumberAttrs(edge, edgeNumAttrs),\n      util.pick(edge, edgeAttrs)));\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  let graph = g.graph();\n  graph.ranksep /= 2;\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    if (edge.width && edge.height) {\n      let v = g.node(e.v);\n      let w = g.node(e.w);\n      let label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  let maxRank = 0;\n  g.nodes().forEach(v => {\n    let node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = Math.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  g.nodes().forEach(v => {\n    let node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  let minX = Number.POSITIVE_INFINITY;\n  let maxX = 0;\n  let minY = Number.POSITIVE_INFINITY;\n  let maxY = 0;\n  let graphLabel = g.graph();\n  let marginX = graphLabel.marginx || 0;\n  let marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    let x = attrs.x;\n    let y = attrs.y;\n    let w = attrs.width;\n    let h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  g.nodes().forEach(v => getExtremes(g.node(v)));\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    if (edge.hasOwnProperty(\"x\")) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  g.nodes().forEach(v => {\n    let node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    edge.points.forEach(p => {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (edge.hasOwnProperty(\"x\")) { edge.x -= minX; }\n    if (edge.hasOwnProperty(\"y\")) { edge.y -= minY; }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    let nodeV = g.node(e.v);\n    let nodeW = g.node(e.w);\n    let p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    if (edge.hasOwnProperty(\"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n      case \"l\": edge.x -= edge.width / 2 + edge.labeloffset; break;\n      case \"r\": edge.x += edge.width / 2 + edge.labeloffset; break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  g.edges().forEach(e => {\n    let edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  g.nodes().forEach(v => {\n    if (g.children(v).length) {\n      let node = g.node(v);\n      let t = g.node(node.borderTop);\n      let b = g.node(node.borderBottom);\n      let l = g.node(node.borderLeft[node.borderLeft.length - 1]);\n      let r = g.node(node.borderRight[node.borderRight.length - 1]);\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  g.nodes().forEach(v => {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  g.edges().forEach(e => {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  layers.forEach(layer => {\n    var orderShift = 0;\n    layer.forEach((v, i) => {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      (node.selfEdges || []).forEach(selfEdge => {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + (++orderShift),\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  g.nodes().forEach(v => {\n    var node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + 2 * dx / 3, y: y - dy },\n        { x: x + 5 * dx / 6, y: y - dy },\n        { x: x +     dx    , y: y },\n        { x: x + 5 * dx / 6, y: y + dy },\n        { x: x + 2 * dx / 3, y: y + dy }\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return util.mapValues(util.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  if (attrs) {\n    Object.entries(attrs).forEach(([k, v]) => {\n      if (typeof k === \"string\") {\n        k = k.toLowerCase();\n      }\n\n      newAttrs[k] = v;\n    });\n  }\n  return newAttrs;\n}\n", "let util = require(\"./util\");\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\n\nmodule.exports = {\n  debugOrdering: debugOrdering\n};\n\n/* istanbul ignore next */\nfunction debugOrdering(g) {\n  let layerMatrix = util.buildLayerMatrix(g);\n\n  let h = new Graph({ compound: true, multigraph: true }).setGraph({});\n\n  g.nodes().forEach(v => {\n    h.setNode(v, { label: v });\n    h.setParent(v, \"layer\" + g.node(v).rank);\n  });\n\n  g.edges().forEach(e => h.setEdge(e.v, e.w, {}, e.name));\n\n  layerMatrix.forEach((layer, i) => {\n    let layerV = \"layer\" + i;\n    h.setNode(layerV, { rank: \"same\" });\n    layer.reduce((u, v) => {\n      h.setEdge(u, v, { style: \"invis\" });\n      return v;\n    });\n  });\n\n  return h;\n}\n", "module.exports = \"1.0.4\";\n", "/*\nCopyright (c) 2012-2014 Chris Pettitt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nmodule.exports = {\n  graphlib: require(\"@dagrejs/graphlib\"),\n\n  layout: require(\"./lib/layout\"),\n  debug: require(\"./lib/debug\"),\n  util: {\n    time: require(\"./lib/util\").time,\n    notime: require(\"./lib/util\").notime\n  },\n  version: require(\"./lib/version\")\n};\n", "import * as dagre from \"@dagrejs/dagre\";\nimport { DomX } from \"./dom-x\";\n\n// Function to shorten the path near the target node\nfunction shortenForArrow(edge, amount) {\n  if (edge.points.length < 2) return \"\";\n\n  const lastPoint = edge.points[edge.points.length - 1];\n  const secondLastPoint = edge.points[edge.points.length - 2];\n\n  const dx = lastPoint.x - secondLastPoint.x;\n  const dy = lastPoint.y - secondLastPoint.y;\n  const len = Math.sqrt(dx * dx + dy * dy);\n  const ratio = (len - amount) / len;\n\n  const shortenedX = secondLastPoint.x + dx * ratio;\n  const shortenedY = secondLastPoint.y + dy * ratio;\n\n  const newPath = edge.points\n    .slice(0, -1)\n    .concat([{ x: shortenedX, y: shortenedY }]);\n  return \"M\" + newPath.map((p) => `${p.x},${p.y}`).join(\"L\");\n}\n\n// Function to calculate the total length of a path\nfunction calculatePathLength(points) {\n  let length = 0;\n  for (let i = 0; i < points.length - 1; i++) {\n    const dx = points[i + 1].x - points[i].x;\n    const dy = points[i + 1].y - points[i].y;\n    length += Math.sqrt(dx * dx + dy * dy);\n  }\n  return length;\n}\n\n// Function to find the point at the halfway mark of the path\nfunction findMidpoint(points, halfLength) {\n  let lengthCovered = 0;\n  for (let i = 0; i < points.length - 1; i++) {\n    const dx = points[i + 1].x - points[i].x;\n    const dy = points[i + 1].y - points[i].y;\n    const segmentLength = Math.sqrt(dx * dx + dy * dy);\n\n    if (lengthCovered + segmentLength >= halfLength) {\n      const ratio = (halfLength - lengthCovered) / segmentLength;\n      return {\n        x: points[i].x + ratio * dx,\n        y: points[i].y + ratio * dy,\n      };\n    }\n    lengthCovered += segmentLength;\n  }\n  return points[0]; // Fallback to the first point\n}\n\nclass DomMachineChart extends HTMLElement {\n  previousState: string = \"\";\n  currentState: string = \"\";\n  currentEvent: string = \"\";\n  config: any;\n  constructor() {\n    super();\n    this.init = this.init.bind(this);\n    this.render = this.render.bind(this);\n  }\n  connectedCallback() {\n    const src = this.getAttribute(\"src\");\n    if (!src) return;\n    const sub = this.getAttribute(\"sub\");\n    if (sub) {\n      const subEl = document.querySelector(sub) as DomX;\n      if (subEl) {\n        this.currentState = subEl.state;\n        subEl.sub((state: string, event: string) => {\n          this.previousState = this.currentState;\n          this.currentState = state;\n          this.currentEvent = event;\n          this.render();\n        });\n      }\n    }\n    fetch(src).then((r) => r.json().then(this.init));\n  }\n  init(config: any) {\n    this.config = config;\n    this.render();\n  }\n  render() {\n    if (!this.config) return;\n    const { states, initialState } = this.config;\n    var g = new dagre.graphlib.Graph();\n    g.setGraph({\n      marginx: 20,\n      marginy: 20,\n      nodesep: 20,\n      edgesep: 100,\n    });\n    g.setDefaultEdgeLabel(() => ({}));\n\n    // Add nodes and edges\n    g.setNode(initialState, { label: initialState, width: 150, height: 50 });\n    Object.entries(states).forEach(([state], i, _states) => {\n      g.setNode(state, { label: state, width: 150, height: 50 });\n      for (const action in states[state]) {\n        const findStateAction = states[state][action].filter(\n          (a) => a[0] === \"state\"\n        )[0];\n        if (!findStateAction) continue;\n        const nextState = findStateAction[1];\n        const id = `${state}-${action}-${nextState}`;\n        g.setEdge(state, nextState, {\n          label: action,\n          id: id,\n        });\n      }\n    });\n\n    // Hydrate graph\n    dagre.layout(g);\n\n    let svgContent =\n      '<svg width=\"' +\n      g.graph().width +\n      '\" height=\"' +\n      g.graph().height +\n      '\" xmlns=\"http://www.w3.org/2000/svg\" style=\"border:1px solid black; font-family: monospace; border-radius:5px;\">';\n\n    // Define the arrowhead marker\n    svgContent += `\n  <defs>\n  <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"8.66\" \n    refX=\"0\" refY=\"4.33\" orient=\"auto\">\n      <polygon fill=\"grey\" points=\"0 8.66, 10 4.33, 0 0\" />\n    </marker>\n  </defs>`;\n\n    // Render nodes\n    g.nodes().forEach((v, i) => {\n      let node = g.node(v);\n      const strokeWidth = node.label === this.currentState ? 3 : 1;\n      svgContent += `<rect rx=\"5\" x=\"${node.x - node.width / 2}\" y=\"${\n        node.y - node.height / 2\n      }\" width=\"${node.width}\" height=\"${\n        node.height\n      }\" style=\"fill: white; stroke: black; stroke-width:${strokeWidth};\"/>`;\n      svgContent += `<text x=\"${node.x}\" y=\"${node.y}\" text-anchor=\"middle\" alignment-baseline=\"central\">${node.label}</text>`;\n    });\n\n    // Render edges\n    g.edges().forEach((e, i) => {\n      let edge = g.edge(e);\n      let path = shortenForArrow(edge, 10); // Shorten by 10 units\n      const color =\n        edge.id ===\n        `${this.previousState}-${this.currentEvent}-${this.currentState}`\n          ? \"black\"\n          : \"grey\";\n\n      svgContent += `<path d=\"${path}\" style=\"fill: none; stroke: ${color};\" marker-end=\"url(#arrowhead)\"/>`;\n\n      // Calculate and add label for the edge\n      const totalLength = calculatePathLength(edge.points);\n      const midpoint = findMidpoint(edge.points, totalLength / 2);\n      const labelText = edge.label;\n      const fontSize = 12; // Adjust as needed\n      const padding = 3; // Padding around the text\n      const textWidth = labelText.length * (fontSize / 1.5); // Estimate text width\n      const textHeight = fontSize; // Estimate text height\n\n      // Add background rectangle for the label\n      svgContent += `<rect rx=\"3\" x=\"${\n        midpoint.x - textWidth / 2 - padding\n      }\" y=\"${midpoint.y - textHeight / 2 - padding}\" width=\"${\n        textWidth + 2 * padding\n      }\" height=\"${textHeight + 2 * padding}\" fill=\"${color}\" />`;\n\n      // Add text label\n      svgContent += `<text fill=\"white\" x=\"${midpoint.x}\" y=\"${midpoint.y}\" text-anchor=\"middle\" alignment-baseline=\"middle\" font-size=\"${fontSize}\">${labelText}</text>`;\n    });\n\n    svgContent += \"</svg>\";\n    this.innerHTML = svgContent;\n  }\n}\n\ncustomElements.define(\"dom-x-chart\", DomMachineChart);\n"],
  "mappings": "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",
  "names": ["v", "w", "v", "range", "range", "g", "require_util", "edge", "dfs", "xs", "layout", "require_version"]
}
