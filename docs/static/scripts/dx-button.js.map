{
  "version": 3,
  "sources": ["../../../src/components/dx-base.ts", "../../../src/components/dx-button.ts"],
  "sourcesContent": ["export type DxStyle = [bp: string, prop: string, val: string, psuedo?: string, subSelector?: string];\n\nexport class DomxBase extends HTMLElement {\n  baseStyles: DxStyle[] = [];\n  props: string[] = [];\n  rendered: boolean = false;\n  styleSheet: CSSStyleSheet = new CSSStyleSheet();\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot!.innerHTML = \"<slot></slot>\";\n    this.shadowRoot!.adoptedStyleSheets = [this.styleSheet];\n    this.render = this.render.bind(this);\n    this.renderCss = this.renderCss.bind(this);\n    this.getStylesFromEl = this.getStylesFromEl.bind(this);\n  }\n  connectedCallback() {\n    this.render();\n    this.dispatchEvent(new CustomEvent(\"rendered\"));\n    this.rendered = true;\n  }\n  renderCss(styles: DxStyle[]) {\n    const renderedStyles = styles\n      .sort((a) => (a[3] ? 1 : -1)) // sort by psuedo\n      .sort((a, b) => Number(a[0]) - Number(b[0])) // sort by breakpoint\n      .map(([bp = \"0\", prop, val, psuedo, sub = \"\"]) => {\n        const subSelector = `${sub !== \"\" ? `::slotted(${sub})` : \"\"}`;\n        return `@media (min-width: ${bp}px) { :host${\n          psuedo ? `(:${psuedo}) ${subSelector}` : subSelector\n        } { ${prop}:${val}; }}`;\n      })\n      .join(\"\\n\");\n    return renderedStyles;\n  }\n  getStylesFromEl(el: HTMLElement, subSelector?: string): DxStyle[] {\n    return el\n      .getAttributeNames()\n      .filter((attr) => !this.props.includes(attr) && !attr.includes(\"onclick:\"))\n      .map((attributeName) => {\n        const [attr, psuedo] = attributeName.split(\":\");\n        const [prop, bp] = attr.split(\"--\");\n        const value = el.getAttribute(attributeName) ?? \"\";\n        return [bp, prop, value, psuedo, subSelector];\n      });\n  }\n  async render() {}\n}\n", "import { DomxBase, DxStyle } from \"./dx-base\";\n\nexport class DomxButton extends DomxBase {\n  baseStyles: DxStyle[] = [\n    [\"0\", \"display\", \"inline-flex\"],\n    [\"0\", \"align-items\", \"center\"],\n    [\"0\", \"cursor\", \"pointer\"],\n    [\"0\", \"justify-content\", \"center\"],\n    [\"0\", \"width\", \"max-content\"],\n  ];\n  props: string[] = [\"id\", \"oclick\"];\n  constructor() {\n    super();\n    this.registerEvents = this.registerEvents.bind(this);\n  }\n  registerEvents() {\n    const DxStateOnClicks = this.getAttributeNames().filter((attr) => attr.startsWith(\"onclick:\"));\n    DxStateOnClicks.forEach((attr) => {\n      const value = this.getAttribute(attr) ?? \"\";\n      this.addEventListener(\"click\", () => {\n        const [_, state] = attr.split(\":\");\n        const transformation = value.split(\",\");\n        const stateEl = document.querySelector(`dx-state[name=${state}]`) as any;\n        const [trait] = transformation;\n        stateEl.transform(trait, transformation);\n      });\n    });\n  }\n  async render() {\n    if (this.rendered) return;\n    this.registerEvents();\n    const baseStyles = this.renderCss(this.baseStyles);\n    const buttonStyles = this.renderCss(this.getStylesFromEl(this));\n    const buttonLabel = this.querySelector(\"dx-button-label\") as DomxButtonLabel;\n    let buttonLabelStyles = \"\";\n    if (buttonLabel) {\n      await customElements.whenDefined(\"dx-button-label\");\n      const buttonLabelStyleList = [...this.getStylesFromEl(buttonLabel)];\n      buttonLabelStyles = this.renderCss(buttonLabelStyleList);\n    }\n    this.styleSheet.replace(baseStyles + buttonStyles + buttonLabelStyles);\n  }\n}\n\ncustomElements.define(\"dx-button\", DomxButton);\n\nexport class DomxButtonLabel extends DomxBase {\n  constructor() {\n    super();\n  }\n}\ncustomElements.define(\"dx-button-label\", DomxButtonLabel);\n"],
  "mappings": "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",
  "names": ["DomxBase", "styles", "a", "b", "bp", "prop", "val", "psuedo", "sub", "subSelector", "el", "attr", "attributeName", "value", "DomxButton", "DomxBase", "attr", "value", "_", "state", "transformation", "stateEl", "trait", "baseStyles", "buttonStyles", "buttonLabel", "buttonLabelStyles", "buttonLabelStyleList", "DomxButtonLabel"]
}
