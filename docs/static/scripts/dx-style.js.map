{
  "version": 3,
  "sources": ["../../../src/components/dx-style.ts"],
  "sourcesContent": ["export class DomxStyle extends HTMLElement {\n  baseStyles: string[][] = [[\"display\", \"inherit\"]];\n  slottedStyles: string[][] = [];\n  psuedoStyles: Record<string, [string, string][]> = {};\n  styleSheet: CSSStyleSheet = new CSSStyleSheet();\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot!.innerHTML = \"<slot></slot>\";\n    this.render = this.render.bind(this);\n    this.shadowRoot!.adoptedStyleSheets = [this.styleSheet];\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"attributes\") this.render();\n      });\n    });\n    observer.observe(this, { attributes: true });\n  }\n  connectedCallback() {\n    this.render();\n    window.addEventListener(\"resize\", this.render);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\"resize\", this.render);\n  }\n  render() {\n    let slottedStylesList = this.slottedStyles;\n    let psuedoStylesList: Record<string, [string, string][]> = {};\n    this.getAttributeNames().forEach((attributeName) => {\n      const [attr, psuedo] = attributeName.split(\":\");\n      const [style, bp] = attr.split(\"--\");\n      const breakpoint = Number(bp ?? 0);\n      if (window.innerWidth < breakpoint) return;\n      const value = (this as any).getAttribute(attributeName);\n      if (psuedo) {\n        if (!psuedoStylesList[psuedo]) psuedoStylesList[psuedo] = [];\n        psuedoStylesList[psuedo].push([style, value]);\n      } else {\n        slottedStylesList.push([style, value]);\n      }\n    });\n\n    // generate host styles\n    const hostStyles = `:host{ ${this.baseStyles\n      .map(([attr, value]) => `${attr}:${value};`)\n      .join(\"\")}}`;\n\n    // generate host slotted styles\n    const hostSlottedStyles = `::slotted(*){ ${slottedStylesList\n      .map(([attr, value]) => `${attr}:${value} !important;`)\n      .join(\"\")}}`;\n\n    // generate host slotted psuedo styles\n    const hostSlottedPsuedoStyles = Object.entries(psuedoStylesList)\n      .map(([psuedo, styles]) => {\n        const _styles = styles\n          .map(([attr, value]) => `${attr}:${value} !important;`)\n          .join(\"\");\n        return `::slotted(*:${psuedo}) { ${_styles} }`;\n      })\n      .join(\"\");\n\n    this.styleSheet.replace(\n      hostStyles + hostSlottedStyles + hostSlottedPsuedoStyles\n    );\n  }\n}\n\ncustomElements.define(\"dx-style\", DomxStyle);\n"],
  "mappings": "mBAAO,IAAMA,EAAN,cAAwB,WAAY,CAKzC,aAAc,CACZ,MAAM,EALR,gBAAyB,CAAC,CAAC,UAAW,SAAS,CAAC,EAChD,mBAA4B,CAAC,EAC7B,kBAAmD,CAAC,EACpD,gBAA4B,IAAI,cAG9B,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAClC,KAAK,WAAY,UAAY,gBAC7B,KAAK,OAAS,KAAK,OAAO,KAAK,IAAI,EACnC,KAAK,WAAY,mBAAqB,CAAC,KAAK,UAAU,EACrC,IAAI,iBAAkBC,GAAc,CACnDA,EAAU,QAASC,GAAa,CAC1BA,EAAS,OAAS,cAAc,KAAK,OAAO,CAClD,CAAC,CACH,CAAC,EACQ,QAAQ,KAAM,CAAE,WAAY,EAAK,CAAC,CAC7C,CACA,mBAAoB,CAClB,KAAK,OAAO,EACZ,OAAO,iBAAiB,SAAU,KAAK,MAAM,CAC/C,CACA,sBAAuB,CACrB,OAAO,oBAAoB,SAAU,KAAK,MAAM,CAClD,CACA,QAAS,CACP,IAAIC,EAAoB,KAAK,cACzBC,EAAuD,CAAC,EAC5D,KAAK,kBAAkB,EAAE,QAASC,GAAkB,CAClD,GAAM,CAACC,EAAMC,CAAM,EAAIF,EAAc,MAAM,GAAG,EACxC,CAACG,EAAOC,CAAE,EAAIH,EAAK,MAAM,IAAI,EAC7BI,EAAa,OAAOD,GAAM,CAAC,EACjC,GAAI,OAAO,WAAaC,EAAY,OACpC,IAAMC,EAAS,KAAa,aAAaN,CAAa,EAClDE,GACGH,EAAiBG,KAASH,EAAiBG,GAAU,CAAC,GAC3DH,EAAiBG,GAAQ,KAAK,CAACC,EAAOG,CAAK,CAAC,GAE5CR,EAAkB,KAAK,CAACK,EAAOG,CAAK,CAAC,CAEzC,CAAC,EAGD,IAAMC,EAAa,UAAU,KAAK,WAC/B,IAAI,CAAC,CAACN,EAAMK,CAAK,IAAM,GAAGL,KAAQK,IAAQ,EAC1C,KAAK,EAAE,KAGJE,EAAoB,iBAAiBV,EACxC,IAAI,CAAC,CAACG,EAAMK,CAAK,IAAM,GAAGL,KAAQK,eAAmB,EACrD,KAAK,EAAE,KAGJG,EAA0B,OAAO,QAAQV,CAAgB,EAC5D,IAAI,CAAC,CAACG,EAAQQ,CAAM,IAAM,CACzB,IAAMC,EAAUD,EACb,IAAI,CAAC,CAACT,EAAMK,CAAK,IAAM,GAAGL,KAAQK,eAAmB,EACrD,KAAK,EAAE,EACV,MAAO,eAAeJ,QAAaS,KACrC,CAAC,EACA,KAAK,EAAE,EAEV,KAAK,WAAW,QACdJ,EAAaC,EAAoBC,CACnC,CACF,CACF,EAEA,eAAe,OAAO,WAAYd,CAAS",
  "names": ["DomxStyle", "mutations", "mutation", "slottedStylesList", "psuedoStylesList", "attributeName", "attr", "psuedo", "style", "bp", "breakpoint", "value", "hostStyles", "hostSlottedStyles", "hostSlottedPsuedoStyles", "styles", "_styles"]
}
