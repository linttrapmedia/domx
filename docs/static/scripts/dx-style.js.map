{
  "version": 3,
  "sources": ["../../../src/components/dx-style.ts"],
  "sourcesContent": ["const styleSheet = new CSSStyleSheet();\n\nconst applyStyles = (el: Element) => {\n  let dxStyleId = el.getAttribute(\"dx-style\");\n  if (!dxStyleId) {\n    dxStyleId = Math.random().toString(36).substring(7);\n    el.setAttribute(\"dx-style\", dxStyleId);\n  }\n\n  const styles = el\n    .getAttributeNames()\n    .filter((attr) => attr.startsWith(\"dx-style:\"))\n    .map((attr) => {\n      const val = el.getAttribute(attr);\n      const [bpAttr, bp = 0] = attr.split(\"--\");\n      const [_, prop, psuedo] = bpAttr.split(\":\");\n      const rule = `@media (min-width: ${bp}px) { [dx-style=\"${dxStyleId}\"]${\n        psuedo ? `:${psuedo}` : \"\"\n      } { ${prop}: ${val}; } }`;\n      return rule;\n    })\n    .sort()\n    .forEach((rule) => {\n      styleSheet.insertRule(rule);\n      console.log(rule);\n    });\n\n  console.log(el, styles);\n};\n\nconst clearStyles = (el: Element) => {};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const dxStyles = document.querySelectorAll(\"[dx-style]\");\n  dxStyles.forEach(applyStyles);\n  document.adoptedStyleSheets = [styleSheet];\n  const observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      if (mutation.type === \"attributes\" && mutation.attributeName === \"dx-style\") {\n        clearStyles(mutation.target as Element);\n      }\n      if (mutation.type === \"childList\" && mutation.addedNodes.length) {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE && (node as Element).hasAttribute(\"dx-style\")) {\n            applyStyles(node as Element);\n          }\n        });\n      }\n    }\n  });\n  observer.observe(document.body, { attributes: true, childList: true, subtree: true });\n});\n\n// class DomxStyle extends HTMLElement {\n//   private styleSheet: CSSStyleSheet = new CSSStyleSheet();\n//   constructor() {\n//     super();\n//     this.render = this.render.bind(this);\n//     this.reduceAttrs = this.reduceAttrs.bind(this);\n//     this.generateSelector = this.generateSelector.bind(this);\n//   }\n//   connectedCallback() {\n//     document.adoptedStyleSheets = [this.styleSheet];\n//     const observer = new MutationObserver((mutations) => {\n//       mutations.forEach((mutation) => {\n//         if (mutation.type === \"attributes\") this.render();\n//       });\n//     });\n//     observer.observe(this, { attributes: true });\n//     this.render();\n//   }\n//   generateSelector(arrays: string[][]) {\n//     const combinations: string[] = [];\n\n//     // Function to recursively generate combinations\n//     function recurse(prefix: string, index: number) {\n//       if (index < arrays.length) {\n//         for (const item of arrays[index]) {\n//           const newPrefix = prefix ? `${prefix}\\\\:${item}` : item;\n//           combinations.push(newPrefix);\n//           recurse(newPrefix, index + 1);\n//         }\n//       }\n//     }\n\n//     // Generate combinations for each array\n//     for (let i = 0; i < arrays.length; i++) {\n//       recurse(\"\", i);\n//     }\n\n//     return combinations;\n//   }\n//   reduceAttrs(prefix: string) {\n//     const attrs = this.getAttributeNames().filter((attr) => attr.startsWith(prefix));\n//     return attrs.reduce((acc, attr) => {\n//       const mod = attr.replace(prefix, \"\");\n//       acc[mod] = this.getAttribute(attr);\n//       return acc;\n//     }, {} as any);\n//   }\n//   render() {\n//     let styles = ``;\n//     const wrapSelector = (sel: string) => (this.hasChildNodes() ? `::slotted(${sel})` : sel);\n//     const colorAttrs = this.reduceAttrs(\"color-\");\n//     const breakpointAttrs = this.reduceAttrs(\"breakpoint-\");\n//     const psuedoAttrs = this.reduceAttrs(\"psuedo-\");\n//     const modifiers = this.generateSelector([Object.keys(breakpointAttrs), Object.keys(psuedoAttrs)]);\n\n//     // colors\n//     for (const colorAttr in colorAttrs) {\n//       const colorVal = colorAttrs[colorAttr];\n//       const colorVar = `dx-style-color-${colorAttr}`;\n//       styles += `${this.hasChildNodes() ? \":host\" : \":root\"} { --${colorVar}:${colorVal}; }\\n`; // needed for local scope\n//       styles += `${wrapSelector(`.txt-${colorAttr}`)} { color: var(--${colorVar}); }\\n`;\n//       styles += `${wrapSelector(`.hover\\\\:txt-${colorAttr}:hover`)}  { color: var(--${colorVar}); }\\n`;\n//       styles += `${wrapSelector(`.bg-${colorAttr}`)}  { background-color: var(--${colorVar}); }\\n`;\n//       styles += `${wrapSelector(`.hover\\\\:bg-${colorAttr}:hover`)}  { background-color: var(--${colorVar}); }\\n`;\n//     }\n\n//     // padding\n\n//     // replace styles\n//     console.log(styles);\n//     this.styleSheet.replaceSync(styles);\n//   }\n// }\n\n// customElements.define(\"dx-style\", DomxStyle);\n\n// const win = window as any;\n// if (!win.DX) win.DX = {};\n// if (!win.DX.style) win.DX.style = {};\n// win.DX.style = DomxStyle;\n"],
  "mappings": ";;;AAAA,MAAM,aAAa,IAAI,cAAc;AAErC,MAAM,cAAc,CAAC,OAAgB;AACnC,QAAI,YAAY,GAAG,aAAa,UAAU;AAC1C,QAAI,CAAC,WAAW;AACd,kBAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC;AAClD,SAAG,aAAa,YAAY,SAAS;AAAA,IACvC;AAEA,UAAM,SAAS,GACZ,kBAAkB,EAClB,OAAO,CAAC,SAAS,KAAK,WAAW,WAAW,CAAC,EAC7C,IAAI,CAAC,SAAS;AACb,YAAM,MAAM,GAAG,aAAa,IAAI;AAChC,YAAM,CAAC,QAAQ,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI;AACxC,YAAM,CAAC,GAAG,MAAM,MAAM,IAAI,OAAO,MAAM,GAAG;AAC1C,YAAM,OAAO,sBAAsB,sBAAsB,cACvD,SAAS,IAAI,WAAW,QACpB,SAAS;AACf,aAAO;AAAA,IACT,CAAC,EACA,KAAK,EACL,QAAQ,CAAC,SAAS;AACjB,iBAAW,WAAW,IAAI;AAC1B,cAAQ,IAAI,IAAI;AAAA,IAClB,CAAC;AAEH,YAAQ,IAAI,IAAI,MAAM;AAAA,EACxB;AAEA,MAAM,cAAc,CAAC,OAAgB;AAAA,EAAC;AAEtC,WAAS,iBAAiB,oBAAoB,MAAM;AAClD,UAAM,WAAW,SAAS,iBAAiB,YAAY;AACvD,aAAS,QAAQ,WAAW;AAC5B,aAAS,qBAAqB,CAAC,UAAU;AACzC,UAAM,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACnD,iBAAW,YAAY,WAAW;AAChC,YAAI,SAAS,SAAS,gBAAgB,SAAS,kBAAkB,YAAY;AAC3E,sBAAY,SAAS,MAAiB;AAAA,QACxC;AACA,YAAI,SAAS,SAAS,eAAe,SAAS,WAAW,QAAQ;AAC/D,mBAAS,WAAW,QAAQ,CAAC,SAAS;AACpC,gBAAI,KAAK,aAAa,KAAK,gBAAiB,KAAiB,aAAa,UAAU,GAAG;AACrF,0BAAY,IAAe;AAAA,YAC7B;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AACD,aAAS,QAAQ,SAAS,MAAM,EAAE,YAAY,MAAM,WAAW,MAAM,SAAS,KAAK,CAAC;AAAA,EACtF,CAAC;",
  "names": []
}
