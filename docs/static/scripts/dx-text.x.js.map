{
  "version": 3,
  "sources": ["../../../src/vars.ts", "../../../src/components/dx-text.x.ts"],
  "sourcesContent": ["export const AttrMap = {\n  \"--bg-black\": \"background-color\",\n  \"--bg-danger\": \"background-color\",\n  \"--bg-info\": \"background-color\",\n  \"--bg-success\": \"background-color\",\n  \"--bg-text\": \"background-color\",\n  \"--bg-warn\": \"background-color\",\n  \"--bg-white\": \"background-color\",\n  \"--font-mono\": \"font-family\",\n  \"--font-sans\": \"font-family\",\n  \"--font-serif\": \"font-family\",\n  \"--font-splash\": \"font-family\",\n  \"--txt-black\": \"color\",\n  \"--txt-danger\": \"color\",\n  \"--txt-info\": \"color\",\n  \"--txt-lg\": \"font-size\",\n  \"--txt-md\": \"font-size\",\n  \"--txt-sm\": \"font-size\",\n  \"--txt-success\": \"color\",\n  \"--txt-text\": \"color\",\n  \"--txt-warn\": \"color\",\n  \"--txt-white\": \"color\",\n  \"--txt-xl\": \"font-size\",\n  \"--txt-center\": \"text-align\",\n} as const;\n\nexport type AttrProp = keyof typeof AttrMap;\n", "import { AttrMap, AttrProp } from \"../vars\";\n\nclass DomText extends HTMLElement {\n  styleSheet: CSSStyleSheet = new CSSStyleSheet();\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot!.innerHTML = \"<slot></slot>\";\n    this.render = this.render.bind(this);\n    this.shadowRoot!.adoptedStyleSheets = [this.styleSheet];\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"attributes\") this.render();\n      });\n    });\n    observer.observe(this, { attributes: true });\n  }\n  connectedCallback() {\n    window.addEventListener(\"resize\", this.render);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\"resize\", this.render);\n  }\n  render() {\n    let styles = \"\";\n    this.getAttributeNames().forEach((attr) => {\n      const [_attr, bp] = attr.split(\":\") as [AttrProp, string];\n      const breakpoint = Number(bp ?? 0);\n      if (window.innerWidth < breakpoint) return;\n      const value = Boolean(this.getAttribute(attr))\n        ? this.getAttribute(attr)\n        : `var(${_attr})`;\n      styles += `${AttrMap[_attr as AttrProp]}: ${value};`;\n    });\n    this.styleSheet.replace(`:host { ${styles} }`);\n  }\n}\n\ncustomElements.define(\"dx-text\", DomText);\n"],
  "mappings": "mBAAO,IAAMA,EAAU,CACrB,aAAc,mBACd,cAAe,mBACf,YAAa,mBACb,eAAgB,mBAChB,YAAa,mBACb,YAAa,mBACb,aAAc,mBACd,cAAe,cACf,cAAe,cACf,eAAgB,cAChB,gBAAiB,cACjB,cAAe,QACf,eAAgB,QAChB,aAAc,QACd,WAAY,YACZ,WAAY,YACZ,WAAY,YACZ,gBAAiB,QACjB,aAAc,QACd,aAAc,QACd,cAAe,QACf,WAAY,YACZ,eAAgB,YAClB,ECtBA,IAAMC,EAAN,cAAsB,WAAY,CAEhC,aAAc,CACZ,MAAM,EAFR,gBAA4B,IAAI,cAG9B,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAClC,KAAK,WAAY,UAAY,gBAC7B,KAAK,OAAS,KAAK,OAAO,KAAK,IAAI,EACnC,KAAK,WAAY,mBAAqB,CAAC,KAAK,UAAU,EACrC,IAAI,iBAAkBC,GAAc,CACnDA,EAAU,QAASC,GAAa,CAC1BA,EAAS,OAAS,cAAc,KAAK,OAAO,CAClD,CAAC,CACH,CAAC,EACQ,QAAQ,KAAM,CAAE,WAAY,EAAK,CAAC,CAC7C,CACA,mBAAoB,CAClB,OAAO,iBAAiB,SAAU,KAAK,MAAM,CAC/C,CACA,sBAAuB,CACrB,OAAO,oBAAoB,SAAU,KAAK,MAAM,CAClD,CACA,QAAS,CACP,IAAIC,EAAS,GACb,KAAK,kBAAkB,EAAE,QAASC,GAAS,CACzC,GAAM,CAACC,EAAOC,CAAE,EAAIF,EAAK,MAAM,GAAG,EAC5BG,EAAa,OAAOD,GAAM,CAAC,EACjC,GAAI,OAAO,WAAaC,EAAY,OACpC,IAAMC,EAAQ,QAAQ,KAAK,aAAaJ,CAAI,CAAC,EACzC,KAAK,aAAaA,CAAI,EACtB,OAAOC,KACXF,GAAU,GAAGM,EAAQJ,OAAuBG,IAC9C,CAAC,EACD,KAAK,WAAW,QAAQ,WAAWL,KAAU,CAC/C,CACF,EAEA,eAAe,OAAO,UAAWH,CAAO",
  "names": ["AttrMap", "DomText", "mutations", "mutation", "styles", "attr", "_attr", "bp", "breakpoint", "value", "AttrMap"]
}
