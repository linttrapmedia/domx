{
  "version": 3,
  "sources": ["../../../src/domx.ts"],
  "sourcesContent": ["async function addClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.add(className));\n}\n\nasync function addEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n    el.addEventListener(event, cb);\n  });\n}\n\nasync function appendTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.append(tmpl.content);\n}\n\nasync function dispatchTransformer(domx: Domx, event: string, timeout: number = 0) {\n  clearTimeout(domx.timeouts[event]);\n  domx.timeouts[event] = setTimeout(() => domx.dispatch(event), timeout);\n}\n\nasync function historyTransformer(_: Domx, state: string, title: string, url: string) {\n  window.history.pushState(state, title, url);\n}\n\ntype GetRequestTransformer =\n  | [key: string, selector: string, prop: \"value\"]\n  | [key: string, selector: string, prop: \"attribute\", propKey: string]\n  | [key: string, selector: string, prop: \"dataset\", propKey: string];\n\nasync function getRequestTransformer(domx: Domx, url: string, ...data: GetRequestTransformer[]) {\n  const urlSearchParams = new URLSearchParams();\n  data.forEach(([key, selector, prop, propKey]) => {\n    switch (prop) {\n      case \"attribute\":\n        const el1 = document.querySelector(selector) as any;\n        if (!el1) return;\n        urlSearchParams.append(key, el1.getAttribute(propKey));\n        break;\n      case \"dataset\":\n        const el2 = document.querySelector(selector) as any;\n        if (!el2) return;\n        urlSearchParams.append(key, el2.dataset[prop][propKey]);\n        break;\n      case \"value\":\n        const el = document.querySelector(selector) as any;\n        if (!el) return;\n        urlSearchParams.append(key, el.value);\n        break;\n    }\n  });\n\n  const _url = url + \"?\" + urlSearchParams.toString();\n  fetch(_url, {\n    method: \"GET\",\n    headers: {\n      domx: domx.getHeaderData(),\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function innerHTMLTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.innerHTML = decodeURIComponent(html);\n}\n\nasync function locationTransformer(_: Domx, url: string) {\n  window.location.href = url;\n}\n\ntype PostRequestTransformerData =\n  | [key: string, selector: string, prop: \"value\"]\n  | [key: string, selector: string, prop: \"attribute\", propKey: string]\n  | [key: string, selector: string, prop: \"dataset\", propKey: string];\n\nasync function postRequestTransformer(domx: Domx, url: string, ...data: PostRequestTransformerData[]) {\n  const formData = new FormData();\n  data.forEach(([key, selector, prop, propKey]) => {\n    switch (prop) {\n      case \"attribute\":\n        const el1 = document.querySelector(selector) as any;\n        if (!el1) return;\n        formData.append(key, el1.getAttribute(propKey));\n        break;\n      case \"dataset\":\n        const el2 = document.querySelector(selector) as any;\n        if (!el2) return;\n        formData.append(key, el2.dataset[prop][propKey]);\n        break;\n      case \"value\":\n        const el = document.querySelector(selector) as any;\n        if (!el) return;\n        formData.append(key, el.value);\n        break;\n    }\n  });\n  fetch(url, {\n    body: formData,\n    method: \"POST\",\n    headers: {\n      domx: domx.getHeaderData(),\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function textContentTransformer(_: Domx, selector: string, text: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.textContent = decodeURIComponent(text);\n}\n\nasync function removeAttributeTransformer(_: Domx, selector: string, attr: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.removeAttribute(attr));\n}\n\nasync function removeEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n  });\n}\n\nasync function removeClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.remove(className));\n}\n\nasync function replaceTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.replaceWith(tmpl.content);\n}\n\nasync function setAttributeTransformer(_: Domx, selector: string, attr: string, value: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    if (value === null) return el.removeAttribute(attr);\n    el.setAttribute(attr, value);\n  });\n}\n\nasync function stateTransformer(domx: Domx, state: string) {\n  domx.state = state;\n  if (domx.fsm.states[state].entry) domx.dispatch(\"entry\");\n}\n\nasync function submitFormTransformer(domx: Domx, formSelector: string) {\n  const form = document.querySelector(formSelector) as HTMLFormElement;\n  const method = (form.method ?? \"POST\").toUpperCase();\n  const enctype = form.enctype ?? \"application/x-www-form-urlencoded\";\n  const formData = new FormData(form);\n  fetch(form.action, {\n    body: formData,\n    method: method,\n    headers: {\n      domx: domx.getHeaderData(),\n      contentType: enctype,\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function waitTransformer(_: Domx, timeout: number) {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n\nasync function windowTransformer(_: Domx, method: string, ...args: any) {\n  (window as any)[method](...args);\n}\n\ntype Tail<T extends any[]> = T extends [any, ...infer Rest] ? Rest : never;\ntype TxArgs<F extends (...args: any) => any> = Tail<Parameters<F>>;\n\nexport type TransformerList = (\n  | [operation: \"addClass\", ...TxArgs<typeof addClassTransformer>]\n  | [operation: \"addEventListener\", ...TxArgs<typeof addEventListenerTransformer>]\n  | [operation: \"append\", ...TxArgs<typeof appendTransformer>]\n  | [operation: \"dispatch\", ...TxArgs<typeof dispatchTransformer>]\n  | [operation: \"innerHTML\", ...TxArgs<typeof innerHTMLTransformer>]\n  | [operation: \"history\", ...TxArgs<typeof historyTransformer>]\n  | [operation: \"get\", ...TxArgs<typeof getRequestTransformer>]\n  | [operation: \"location\", ...TxArgs<typeof locationTransformer>]\n  | [operation: \"post\", ...TxArgs<typeof postRequestTransformer>]\n  | [operation: \"removeAttribute\", ...TxArgs<typeof removeAttributeTransformer>]\n  | [operation: \"removeClass\", ...TxArgs<typeof removeClassTransformer>]\n  | [operation: \"removeEventListener\", ...TxArgs<typeof removeEventListenerTransformer>]\n  | [operation: \"replace\", ...TxArgs<typeof replaceTransformer>]\n  | [operation: \"setAttribute\", ...TxArgs<typeof setAttributeTransformer>]\n  | [operation: \"state\", ...TxArgs<typeof stateTransformer>]\n  | [operation: \"submit\", ...TxArgs<typeof submitFormTransformer>]\n  | [operation: \"textContent\", ...TxArgs<typeof textContentTransformer>]\n  | [operation: \"wait\", ...TxArgs<typeof waitTransformer>]\n  | [operation: \"window\", ...TxArgs<typeof windowTransformer>]\n)[];\n\ntype FSM = {\n  id: string;\n  initialState: string;\n  listeners?: [selector: string, event: string, evt: string][];\n  states: Record<string, Record<string, TransformerList>>;\n};\n\nexport class Domx {\n  fsm: FSM = {\n    id: \"\",\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  state: string = \"\";\n  subs: ((evt: string, prevState: string, nextState: string) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  tranformers: Record<string, (instance: Domx, ...args: any) => void> = {};\n  /**\n   * dynamically add a transformer\n   * @param name name of transformer\n   * @param cb callback\n   */\n  addTransformer(name: string, cb: (...args: any) => void) {\n    this.tranformers[name] = cb;\n    return this;\n  }\n\n  constructor(fsm?: FSM) {\n    this.dispatch = this.dispatch.bind(this);\n    this.init = this.init.bind(this);\n    this.registerEventListeners = this.registerEventListeners.bind(this);\n    this.sub = this.sub.bind(this);\n    this.transform = this.transform.bind(this);\n\n    // ==============================\n    // Built-in transformers\n    // ==============================\n\n    this.addTransformer(\"addClass\", addClassTransformer);\n    this.addTransformer(\"addEventListener\", addEventListenerTransformer);\n    this.addTransformer(\"append\", appendTransformer);\n    this.addTransformer(\"dispatch\", dispatchTransformer);\n    this.addTransformer(\"innerHTML\", innerHTMLTransformer);\n    this.addTransformer(\"history\", historyTransformer);\n    this.addTransformer(\"get\", getRequestTransformer);\n    this.addTransformer(\"location\", locationTransformer);\n    this.addTransformer(\"post\", postRequestTransformer);\n    this.addTransformer(\"removeAttribute\", removeAttributeTransformer);\n    this.addTransformer(\"removeClass\", removeClassTransformer);\n    this.addTransformer(\"removeEventListener\", removeEventListenerTransformer);\n    this.addTransformer(\"replace\", replaceTransformer);\n    this.addTransformer(\"setAttribute\", setAttributeTransformer);\n    this.addTransformer(\"state\", stateTransformer);\n    this.addTransformer(\"submit\", submitFormTransformer);\n    this.addTransformer(\"textContent\", textContentTransformer);\n    this.addTransformer(\"wait\", waitTransformer);\n    this.addTransformer(\"window\", windowTransformer);\n\n    if (fsm) document.addEventListener(\"DOMContentLoaded\", () => this.init(fsm));\n  }\n\n  /**\n   * trigger an event\n   * @param evt name of event\n   */\n  dispatch(evt: string) {\n    const transformations = this.fsm.states[this.state][evt];\n    if (!transformations) return;\n    const prevState = this.state;\n    // run transformations\n    this.transform(transformations, () => {\n      this.subs.forEach((s) => s(evt, prevState, this.state));\n    });\n  }\n\n  /**\n   * get header data\n   * @returns header data\n   */\n  getHeaderData() {\n    return JSON.stringify({ id: this.fsm.id, state: this.state });\n  }\n\n  /**\n   * initialize the state machine\n   * @param fsm state machine\n   */\n  init(fsm: FSM) {\n    // set fsm\n    this.fsm = fsm;\n\n    // Register event listeners\n    this.registerEventListeners();\n\n    // Apply initial state\n    const initState = fsm.states[fsm.initialState];\n    this.state = fsm.initialState;\n\n    // run entry transformation if it exists\n    if (initState.entry) this.dispatch(\"entry\");\n  }\n\n  /**\n   * register event listeners\n   */\n  registerEventListeners() {\n    const listeners = this.fsm.listeners ?? [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      const [selector, eventListener, fsmEvent] = listeners[i];\n      const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n      // add event listeners to all registered elements\n      for (let j = 0; j < els.length; j++) {\n        const el = els[j];\n        const cb = (e: any) => {\n          e.preventDefault();\n          if (e.target !== el) return;\n          // event listeners can only do one thing, dispatch an event\n          // all other transformations should be done in the state machine\n          this.dispatch(fsmEvent);\n        };\n        // prevent duplicate event listeners\n        el.removeEventListener(eventListener, cb);\n        el.addEventListener(eventListener, cb);\n      }\n    }\n  }\n\n  /**\n   * subscribe to state changes\n   * @param s callback\n   * @returns\n   */\n  sub(s: (event: string, prevState: string, nextState: string) => void) {\n    this.subs.push(s);\n    return () => this.unsub(s);\n  }\n\n  /**\n   * run list of transformations\n   * @param tx transformation list\n   * @param cb callback\n   * @returns\n   */\n  async transform(transformations: TransformerList = [], cb?: () => void) {\n    // get transformations from current state\n    if (!transformations) return;\n\n    // apply each transformation\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [transformer, ...transformerArgs] = transformation;\n      const transformerFn = this.tranformers[transformer];\n      if (!transformerFn) throw new Error(`Unknown transformer: ${transformer}`);\n      await transformerFn(this, ...transformerArgs);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * unsubscribe from state changes\n   * @param s callback\n   */\n  unsub: (s: (state: string, evt: string, transformations: any) => void) => void = (s) => {\n    this.subs = this.subs.filter((sub) => sub !== s);\n  };\n}\n\nclass DomxCustomElement extends HTMLElement {\n  instance: Domx = new Domx();\n  constructor() {\n    super();\n    this.registerLocalFSM = this.registerLocalFSM.bind(this);\n    this.registerRemoteFSM = this.registerRemoteFSM.bind(this);\n    let slot = document.createElement(\"slot\");\n    slot.style.display = \"none\";\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(slot);\n    slot.addEventListener(\"slotchange\", () => this.registerLocalFSM(slot));\n  }\n\n  connectedCallback() {\n    if (this.getAttribute(\"src\")) this.registerRemoteFSM();\n  }\n\n  registerLocalFSM(slot: HTMLSlotElement) {\n    const nodes = slot.assignedNodes();\n    const local: any = nodes[0].nodeValue;\n    if (local) return this.instance.init(JSON.parse(local));\n  }\n\n  registerRemoteFSM() {\n    const remote = this.getAttribute(\"src\");\n    if (remote) return fetch(remote).then((r) => r.json().then(this.instance.init));\n  }\n}\n\ncustomElements.define(\"dom-x\", DomxCustomElement);\n(window as any).Domx = Domx;\n"],
  "mappings": "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",
  "names": ["addClassTransformer", "_", "selector", "className", "el", "addEventListenerTransformer", "domx", "event", "fsmEvent", "cb", "e", "appendTransformer", "html", "tmpl", "dispatchTransformer", "timeout", "historyTransformer", "state", "title", "url", "getRequestTransformer", "data", "urlSearchParams", "key", "prop", "propKey", "el1", "el2", "_url", "r", "transformations", "innerHTMLTransformer", "locationTransformer", "postRequestTransformer", "formData", "textContentTransformer", "text", "removeAttributeTransformer", "attr", "removeEventListenerTransformer", "removeClassTransformer", "replaceTransformer", "setAttributeTransformer", "value", "stateTransformer", "submitFormTransformer", "formSelector", "form", "method", "enctype", "waitTransformer", "resolve", "windowTransformer", "args", "Domx", "fsm", "s", "sub", "name", "evt", "prevState", "initState", "listeners", "i", "eventListener", "els", "j", "transformation", "transformer", "transformerArgs", "transformerFn", "DomxCustomElement", "slot", "local", "remote"]
}
