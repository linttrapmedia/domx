{
  "version": 3,
  "sources": ["../../../src/domx.ts"],
  "sourcesContent": ["async function addClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.add(className));\n}\n\nasync function addEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n    el.addEventListener(event, cb);\n  });\n}\n\nasync function appendTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.append(tmpl.content);\n}\n\nasync function dispatchTransformer(domx: Domx, event: string, timeout: number = 0) {\n  clearTimeout(domx.timeouts[event]);\n  domx.timeouts[event] = setTimeout(() => domx.dispatch(event), timeout);\n}\n\nasync function historyTransformer(_: Domx, state: string, title: string, url: string) {\n  window.history.pushState(state, title, url);\n}\n\ntype GetRequestTransformer =\n  | [key: string, selector: string, prop: \"value\"]\n  | [key: string, selector: string, prop: \"attribute\", propKey: string]\n  | [key: string, selector: string, prop: \"dataset\", propKey: string];\n\nasync function getRequestTransformer(domx: Domx, url: string, ...data: GetRequestTransformer[]) {\n  const urlSearchParams = new URLSearchParams();\n  data.forEach(([key, selector, prop, propKey]) => {\n    switch (prop) {\n      case \"attribute\":\n        const el1 = document.querySelector(selector) as any;\n        if (!el1) return;\n        urlSearchParams.append(key, el1.getAttribute(propKey));\n        break;\n      case \"dataset\":\n        const el2 = document.querySelector(selector) as any;\n        if (!el2) return;\n        urlSearchParams.append(key, el2.dataset[prop][propKey]);\n        break;\n      case \"value\":\n        const el = document.querySelector(selector) as any;\n        if (!el) return;\n        urlSearchParams.append(key, el.value);\n        break;\n    }\n  });\n\n  const _url = url + \"?\" + urlSearchParams.toString();\n  fetch(_url, {\n    method: \"GET\",\n    headers: {\n      domx: domx.getHeaderData(),\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function innerHTMLTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.innerHTML = decodeURIComponent(html);\n}\n\nasync function locationTransformer(_: Domx, url: string) {\n  window.location.href = url;\n}\n\ntype PostRequestTransformerData =\n  | [key: string, selector: string, prop: \"value\"]\n  | [key: string, selector: string, prop: \"attribute\", propKey: string]\n  | [key: string, selector: string, prop: \"dataset\", propKey: string];\n\nasync function postRequestTransformer(domx: Domx, url: string, ...data: PostRequestTransformerData[]) {\n  const formData = new FormData();\n  data.forEach(([key, selector, prop, propKey]) => {\n    switch (prop) {\n      case \"attribute\":\n        const el1 = document.querySelector(selector) as any;\n        if (!el1) return;\n        formData.append(key, el1.getAttribute(propKey));\n        break;\n      case \"dataset\":\n        const el2 = document.querySelector(selector) as any;\n        if (!el2) return;\n        formData.append(key, el2.dataset[prop][propKey]);\n        break;\n      case \"value\":\n        const el = document.querySelector(selector) as any;\n        if (!el) return;\n        formData.append(key, el.value);\n        break;\n    }\n  });\n  fetch(url, {\n    body: formData,\n    method: \"POST\",\n    headers: {\n      domx: domx.getHeaderData(),\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function removeAttributeTransformer(_: Domx, selector: string, attr: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.removeAttribute(attr));\n}\n\nasync function removeTransformer(_: Domx, selector: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.remove();\n}\n\nasync function removeEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n  });\n}\n\nasync function removeClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.remove(className));\n}\n\nasync function replaceTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.replaceWith(tmpl.content);\n}\n\nasync function setAttributeTransformer(_: Domx, selector: string, attr: string, value: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    if (value === null) return el.removeAttribute(attr);\n    el.setAttribute(attr, value);\n  });\n}\n\nasync function stateTransformer(domx: Domx, state: string) {\n  domx.state = state;\n  if (domx.fsm.states[state].entry) domx.dispatch(\"entry\");\n}\n\nasync function submitFormTransformer(domx: Domx, formSelector: string) {\n  const form = document.querySelector(formSelector) as HTMLFormElement;\n  const method = (form.method ?? \"POST\").toUpperCase();\n  const enctype = form.enctype ?? \"application/x-www-form-urlencoded\";\n  const formData = new FormData(form);\n  fetch(form.action, {\n    body: formData,\n    method: method,\n    headers: {\n      domx: domx.getHeaderData(),\n      contentType: enctype,\n    },\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nasync function textContentTransformer(_: Domx, selector: string, text: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.textContent = decodeURIComponent(text);\n}\n\nasync function waitTransformer(_: Domx, timeout: number) {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n\nasync function windowTransformer(_: Domx, method: string, ...args: any) {\n  (window as any)[method](...args);\n}\n\ntype Tail<T extends any[]> = T extends [any, ...infer Rest] ? Rest : never;\ntype TxArgs<F extends (...args: any) => any> = Tail<Parameters<F>>;\n\nexport type TransformerList = (\n  | [operation: \"addClass\", ...TxArgs<typeof addClassTransformer>]\n  | [operation: \"addEventListener\", ...TxArgs<typeof addEventListenerTransformer>]\n  | [operation: \"append\", ...TxArgs<typeof appendTransformer>]\n  | [operation: \"dispatch\", ...TxArgs<typeof dispatchTransformer>]\n  | [operation: \"innerHTML\", ...TxArgs<typeof innerHTMLTransformer>]\n  | [operation: \"history\", ...TxArgs<typeof historyTransformer>]\n  | [operation: \"get\", ...TxArgs<typeof getRequestTransformer>]\n  | [operation: \"location\", ...TxArgs<typeof locationTransformer>]\n  | [operation: \"post\", ...TxArgs<typeof postRequestTransformer>]\n  | [operation: \"remove\", ...TxArgs<typeof removeTransformer>]\n  | [operation: \"removeAttribute\", ...TxArgs<typeof removeAttributeTransformer>]\n  | [operation: \"removeClass\", ...TxArgs<typeof removeClassTransformer>]\n  | [operation: \"removeEventListener\", ...TxArgs<typeof removeEventListenerTransformer>]\n  | [operation: \"replace\", ...TxArgs<typeof replaceTransformer>]\n  | [operation: \"setAttribute\", ...TxArgs<typeof setAttributeTransformer>]\n  | [operation: \"state\", ...TxArgs<typeof stateTransformer>]\n  | [operation: \"submit\", ...TxArgs<typeof submitFormTransformer>]\n  | [operation: \"textContent\", ...TxArgs<typeof textContentTransformer>]\n  | [operation: \"wait\", ...TxArgs<typeof waitTransformer>]\n  | [operation: \"window\", ...TxArgs<typeof windowTransformer>]\n)[];\n\ntype FSM = {\n  id: string;\n  initialState: string;\n  listeners?: [selector: string, event: string, evt: string][];\n  states: Record<string, Record<string, TransformerList>>;\n};\n\nexport class Domx {\n  fsm: FSM = {\n    id: \"\",\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  state: string = \"\";\n  subs: ((evt: string, prevState: string, nextState: string) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  tranformers: Record<string, (instance: Domx, ...args: any) => void> = {};\n  /**\n   * dynamically add a transformer\n   * @param name name of transformer\n   * @param cb callback\n   */\n  addTransformer(name: string, cb: (...args: any) => void) {\n    this.tranformers[name] = cb;\n    return this;\n  }\n\n  constructor(fsm?: FSM) {\n    this.dispatch = this.dispatch.bind(this);\n    this.init = this.init.bind(this);\n    this.registerEventListeners = this.registerEventListeners.bind(this);\n    this.sub = this.sub.bind(this);\n    this.transform = this.transform.bind(this);\n\n    // ==============================\n    // Built-in transformers\n    // ==============================\n\n    this.addTransformer(\"addClass\", addClassTransformer);\n    this.addTransformer(\"addEventListener\", addEventListenerTransformer);\n    this.addTransformer(\"append\", appendTransformer);\n    this.addTransformer(\"dispatch\", dispatchTransformer);\n    this.addTransformer(\"innerHTML\", innerHTMLTransformer);\n    this.addTransformer(\"history\", historyTransformer);\n    this.addTransformer(\"get\", getRequestTransformer);\n    this.addTransformer(\"location\", locationTransformer);\n    this.addTransformer(\"post\", postRequestTransformer);\n    this.addTransformer(\"removeAttribute\", removeAttributeTransformer);\n    this.addTransformer(\"removeClass\", removeClassTransformer);\n    this.addTransformer(\"removeEventListener\", removeEventListenerTransformer);\n    this.addTransformer(\"replace\", replaceTransformer);\n    this.addTransformer(\"setAttribute\", setAttributeTransformer);\n    this.addTransformer(\"state\", stateTransformer);\n    this.addTransformer(\"submit\", submitFormTransformer);\n    this.addTransformer(\"textContent\", textContentTransformer);\n    this.addTransformer(\"wait\", waitTransformer);\n    this.addTransformer(\"window\", windowTransformer);\n\n    if (fsm) document.addEventListener(\"DOMContentLoaded\", () => this.init(fsm));\n  }\n\n  /**\n   * trigger an event\n   * @param evt name of event\n   */\n  dispatch(evt: string) {\n    const transformations = this.fsm.states[this.state][evt];\n    if (!transformations) return;\n    const prevState = this.state;\n    // run transformations\n    this.transform(transformations, () => {\n      this.subs.forEach((s) => s(evt, prevState, this.state));\n    });\n  }\n\n  /**\n   * get header data\n   * @returns header data\n   */\n  getHeaderData() {\n    return JSON.stringify({ id: this.fsm.id, state: this.state });\n  }\n\n  /**\n   * initialize the state machine\n   * @param fsm state machine\n   */\n  init(fsm: FSM) {\n    // set fsm\n    this.fsm = fsm;\n\n    // Register event listeners\n    this.registerEventListeners();\n\n    // Apply initial state\n    const initState = fsm.states[fsm.initialState];\n    this.state = fsm.initialState;\n\n    // run entry transformation if it exists\n    if (initState.entry) this.dispatch(\"entry\");\n  }\n\n  /**\n   * register event listeners\n   */\n  registerEventListeners() {\n    const listeners = this.fsm.listeners ?? [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      const [selector, eventListener, fsmEvent] = listeners[i];\n      const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n      // add event listeners to all registered elements\n      for (let j = 0; j < els.length; j++) {\n        const el = els[j];\n        const cb = (e: any) => {\n          e.preventDefault();\n          if (e.target !== el) return;\n          // event listeners can only do one thing, dispatch an event\n          // all other transformations should be done in the state machine\n          this.dispatch(fsmEvent);\n        };\n        // prevent duplicate event listeners\n        el.removeEventListener(eventListener, cb);\n        el.addEventListener(eventListener, cb);\n      }\n    }\n  }\n\n  /**\n   * subscribe to state changes\n   * @param s callback\n   * @returns\n   */\n  sub(s: (event: string, prevState: string, nextState: string) => void) {\n    this.subs.push(s);\n    return () => this.unsub(s);\n  }\n\n  /**\n   * run list of transformations\n   * @param tx transformation list\n   * @param cb callback\n   * @returns\n   */\n  async transform(transformations: TransformerList = [], cb?: () => void) {\n    // get transformations from current state\n    if (!transformations) return;\n\n    // apply each transformation\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [transformer, ...transformerArgs] = transformation;\n      const transformerFn = this.tranformers[transformer];\n      if (!transformerFn) throw new Error(`Unknown transformer: ${transformer}`);\n      await transformerFn(this, ...transformerArgs);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * unsubscribe from state changes\n   * @param s callback\n   */\n  unsub: (s: (state: string, evt: string, transformations: any) => void) => void = (s) => {\n    this.subs = this.subs.filter((sub) => sub !== s);\n  };\n}\n\nclass DomxCustomElement extends HTMLElement {\n  instance: Domx = new Domx();\n  constructor() {\n    super();\n    this.registerLocalFSM = this.registerLocalFSM.bind(this);\n    this.registerRemoteFSM = this.registerRemoteFSM.bind(this);\n    let slot = document.createElement(\"slot\");\n    slot.style.display = \"none\";\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(slot);\n    slot.addEventListener(\"slotchange\", () => this.registerLocalFSM(slot));\n  }\n\n  connectedCallback() {\n    if (this.getAttribute(\"src\")) this.registerRemoteFSM();\n  }\n\n  registerLocalFSM(slot: HTMLSlotElement) {\n    const nodes = slot.assignedNodes();\n    const local: any = nodes[0].nodeValue;\n    if (local) return this.instance.init(JSON.parse(local));\n  }\n\n  registerRemoteFSM() {\n    const remote = this.getAttribute(\"src\");\n    if (remote) return fetch(remote).then((r) => r.json().then(this.instance.init));\n  }\n}\n\ncustomElements.define(\"dom-x\", DomxCustomElement);\n(window as any).Domx = Domx;\n"],
  "mappings": "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",
  "names": []
}
