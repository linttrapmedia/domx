{
  "version": 3,
  "sources": ["../../../src/components/domx.ts"],
  "sourcesContent": ["function addClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.add(className));\n}\n\nfunction addEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n    el.addEventListener(event, cb);\n  });\n}\n\nfunction appendTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.append(tmpl.content);\n}\n\nfunction dispatchTransformer(domx: Domx, event: string, timeout: number = 0) {\n  clearTimeout(domx.timeouts[event]);\n  domx.timeouts[event] = setTimeout(() => domx.dispatch(event), timeout);\n}\n\nfunction historyTransformer(_: Domx, state: string, title: string, url: string) {\n  window.history.pushState(state, title, url);\n}\n\nfunction getRequestTransformer(domx: Domx, url: string) {\n  fetch(url, {\n    method: \"GET\",\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nfunction innerHTMLTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.innerHTML = decodeURIComponent(html);\n}\n\nfunction locationTransformer(_: Domx, url: string) {\n  window.location.href = url;\n}\n\nfunction postRequestTransformer(domx: Domx, formSelector: string) {\n  const form = document.querySelector(formSelector) as HTMLFormElement;\n  const formData = new FormData(form);\n  fetch(form.action, {\n    body: formData,\n    method: \"POST\",\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nfunction textContentTransformer(_: Domx, selector: string, text: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.textContent = decodeURIComponent(text);\n}\n\nfunction removeAttributeTransformer(_: Domx, selector: string, attr: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.removeAttribute(attr));\n}\n\nfunction removeEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n  });\n}\n\nfunction removeClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.remove(className));\n}\n\nfunction replaceTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.replaceWith(tmpl.content);\n}\n\nfunction setAttributeTransformer(_: Domx, selector: string, attr: string, value: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    if (value === null) return el.removeAttribute(attr);\n    el.setAttribute(attr, value);\n  });\n}\n\nfunction waitTransformer(_: Domx, timeout: number) {\n  const startTime = new Date().getTime();\n  while (new Date().getTime() - startTime < timeout) {\n    // Do nothing\n  }\n}\n\nfunction windowTransformer(_: Domx, method: string, ...args: any) {\n  (window as any)[method](...args);\n}\n\nfunction stateTransformer(domx: Domx, state: string) {\n  domx.state = state;\n  if (domx.fsm.states[state].entry) domx.dispatch(\"entry\");\n}\n\ntype FSM = {\n  initialState: string;\n  listeners: [selector: string, event: string, evt: string][];\n  states: Record<\n    string,\n    Record<\n      | string\n      | \"entry\"\n      | \"addClass\"\n      | \"addClass\"\n      | \"addEventListener\"\n      | \"append\"\n      | \"dispatch\"\n      | \"innerHTML\"\n      | \"history\"\n      | \"get\"\n      | \"location\"\n      | \"post\"\n      | \"removeAttribute\"\n      | \"removeClass\"\n      | \"removeEventListener\"\n      | \"replace\"\n      | \"setAttribute\"\n      | \"state\"\n      | \"textContent\"\n      | \"wait\"\n      | \"window\",\n      string[][]\n    >\n  >;\n};\nexport class Domx {\n  state: string = \"\";\n  fsm: FSM = {\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  subs: ((evt: string, prevState: string, nextState: string) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  tranformers: Record<string, (instance: Domx, ...args: any) => void> = {};\n  /**\n   * dynamically add a transformer\n   * @param name name of transformer\n   * @param cb callback\n   */\n  addTransformer(name: string, cb: (...args: any) => void) {\n    this.tranformers[name] = cb;\n    return this;\n  }\n\n  constructor(fsm?: FSM) {\n    this.dispatch = this.dispatch.bind(this);\n    this.init = this.init.bind(this);\n    this.registerEventListeners = this.registerEventListeners.bind(this);\n    this.sub = this.sub.bind(this);\n    this.transform = this.transform.bind(this);\n\n    // ==============================\n    // Built-in transformers\n    // ==============================\n\n    this.addTransformer(\"addClass\", addClassTransformer);\n    this.addTransformer(\"addEventListener\", addEventListenerTransformer);\n    this.addTransformer(\"append\", appendTransformer);\n    this.addTransformer(\"dispatch\", dispatchTransformer);\n    this.addTransformer(\"innerHTML\", innerHTMLTransformer);\n    this.addTransformer(\"history\", historyTransformer);\n    this.addTransformer(\"get\", getRequestTransformer);\n    this.addTransformer(\"location\", locationTransformer);\n    this.addTransformer(\"post\", postRequestTransformer);\n    this.addTransformer(\"removeAttribute\", removeAttributeTransformer);\n    this.addTransformer(\"removeClass\", removeClassTransformer);\n    this.addTransformer(\"removeEventListener\", removeEventListenerTransformer);\n    this.addTransformer(\"replace\", replaceTransformer);\n    this.addTransformer(\"setAttribute\", setAttributeTransformer);\n    this.addTransformer(\"state\", stateTransformer);\n    this.addTransformer(\"textContent\", textContentTransformer);\n    this.addTransformer(\"wait\", waitTransformer);\n    this.addTransformer(\"window\", windowTransformer);\n\n    if (fsm) document.addEventListener(\"DOMContentLoaded\", () => this.init(fsm));\n  }\n\n  /**\n   * trigger an event\n   * @param evt name of event\n   */\n  dispatch(evt: string) {\n    const transformations = this.fsm.states[this.state][evt];\n    if (!transformations) return;\n    const prevState = this.state;\n    // run transformations\n    this.transform(transformations, () => {\n      this.subs.forEach((s) => s(evt, prevState, this.state));\n    });\n  }\n\n  /**\n   * initialize the state machine\n   * @param fsm state machine\n   */\n  init(fsm: FSM) {\n    // set fsm\n    this.fsm = fsm;\n\n    // Register event listeners\n    this.registerEventListeners();\n\n    // Apply initial state\n    const initState = fsm.states[fsm.initialState];\n    this.state = fsm.initialState;\n\n    // run entry transformation if it exists\n    if (initState.entry) this.dispatch(\"entry\");\n  }\n\n  /**\n   * register event listeners\n   */\n  registerEventListeners() {\n    const listeners = this.fsm.listeners ?? [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      const [selector, eventListener, fsmEvent] = listeners[i];\n      const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n      // add event listeners to all registered elements\n      for (let j = 0; j < els.length; j++) {\n        const el = els[j];\n        const cb = (e: any) => {\n          e.preventDefault();\n          if (e.target !== el) return;\n          // event listeners can only do one thing, dispatch an event\n          // all other transformations should be done in the state machine\n          this.dispatch(fsmEvent);\n        };\n        // prevent duplicate event listeners\n        el.removeEventListener(eventListener, cb);\n        el.addEventListener(eventListener, cb);\n      }\n    }\n  }\n\n  /**\n   * subscribe to state changes\n   * @param s callback\n   * @returns\n   */\n  sub(s: (event: string, prevState: string, nextState: string) => void) {\n    this.subs.push(s);\n    return () => this.unsub(s);\n  }\n\n  /**\n   * run list of transformations\n   * @param tx transformation list\n   * @param cb callback\n   * @returns\n   */\n  transform(transformations: string[][] = [], cb?: () => void) {\n    // get transformations from current state\n    if (!transformations) return;\n\n    // apply each transformation\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [transformer, ...transformerArgs] = transformation;\n      const transformerFn = this.tranformers[transformer];\n      if (!transformerFn) throw new Error(`Unknown transformer: ${transformer}`);\n      transformerFn(this, ...transformerArgs);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * unsubscribe from state changes\n   * @param s callback\n   */\n  unsub: (s: (state: string, evt: string, transformations: any) => void) => void = (s) => {\n    this.subs = this.subs.filter((sub) => sub !== s);\n  };\n}\n\nclass DomxCustomElement extends HTMLElement {\n  instance: Domx = new Domx();\n  constructor() {\n    super();\n    this.registerLocalFSM = this.registerLocalFSM.bind(this);\n    this.registerRemoteFSM = this.registerRemoteFSM.bind(this);\n    let slot = document.createElement(\"slot\");\n    slot.style.display = \"none\";\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(slot);\n    slot.addEventListener(\"slotchange\", () => this.registerLocalFSM(slot));\n  }\n\n  connectedCallback() {\n    if (this.getAttribute(\"src\")) this.registerRemoteFSM();\n  }\n\n  registerLocalFSM(slot: HTMLSlotElement) {\n    const nodes = slot.assignedNodes();\n    const local: any = nodes[0].nodeValue;\n    if (local) return this.instance.init(JSON.parse(local));\n  }\n\n  registerRemoteFSM() {\n    const remote = this.getAttribute(\"src\");\n    if (remote) return fetch(remote).then((r) => r.json().then(this.instance.init));\n  }\n}\n\ncustomElements.define(\"dom-x\", DomxCustomElement);\n(window as any).Domx = Domx;\n"],
  "mappings": "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",
  "names": []
}
