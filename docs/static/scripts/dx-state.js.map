{
  "version": 3,
  "sources": ["../../../src/components/dx-state.ts"],
  "sourcesContent": ["type DxAppend = [dx: \"append\", selector: string, html: string];\ntype DxAttr = [dx: \"attr\", selector: string, attr: string, value: string];\ntype DxClick = [dx: \"click\", selector: string, action: string];\ntype DxCall = [\n  dx: \"call\",\n  selector: string,\n  method: string,\n  ...args: (string | number)[]\n];\ntype DxDispatch = [dx: \"dispatch\", action: string, timeout?: number];\ntype DxGet = [dx: \"get\", url: string];\ntype DxJs = [dx: \"js\", method: string, ...args: (string | number)[]];\ntype DxPost = [\n  dx: \"post\",\n  url: string,\n  ...data: [\n    key: string,\n    selector: string,\n    val: \"value\" | \"dataset\" | \"formData\"\n  ][]\n];\ntype DxReplace = [dx: \"replace\", selector: string, content: string];\ntype DxServer = [dx: \"server\", key: string];\ntype DxState = [dx: \"state\", state: string];\ntype DxSubmit = [dx: \"submit\", selector: string, action: string];\ntype DxText = [dx: \"text\", selector: string, text: string];\ntype DxWait = [dx: \"wait\", milliseconds: number, action: string];\n\ntype DX =\n  | DxAppend\n  | DxAttr\n  | DxClick\n  | DxCall\n  | DxDispatch\n  | DxJs\n  | DxGet\n  | DxPost\n  | DxReplace\n  | DxServer\n  | DxState\n  | DxSubmit\n  | DxWait;\n\ntype Config = {\n  initialState: string;\n  listeners: [selector: string, event: string, action: string][];\n  states: Record<string, Record<string | \"entry\", DX[]>>;\n};\n\nexport class DomState extends HTMLElement {\n  state: string = \"\";\n  config: Config = {\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  subs: ((state: string, action: string, dx: DX) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  constructor() {\n    super();\n    this.transform = this.transform.bind(this);\n    this.applyAppend = this.applyAppend.bind(this);\n    this.applyAttr = this.applyAttr.bind(this);\n    this.applyCall = this.applyCall.bind(this);\n    this.applyEventListener = this.applyEventListener.bind(this);\n    this.applyDispatch = this.applyDispatch.bind(this);\n    this.applyGet = this.applyGet.bind(this);\n    this.applyJs = this.applyJs.bind(this);\n    this.applyPost = this.applyPost.bind(this);\n    this.applyReplace = this.applyReplace.bind(this);\n    this.applyState = this.applyState.bind(this);\n    this.applyText = this.applyText.bind(this);\n    this.applyWait = this.applyWait.bind(this);\n    this.dispatch = this.dispatch.bind(this);\n    this.handleClientEvent = this.handleClientEvent.bind(this);\n    this.handleServerEvent = this.handleServerEvent.bind(this);\n    this.init = this.init.bind(this);\n    this.sub = this.sub.bind(this);\n  }\n  connectedCallback() {\n    const src = this.getAttribute(\"src\");\n    if (!src) return;\n    fetch(src).then((r) => r.json().then(this.init));\n  }\n  applyAppend(transformation: DxAppend) {\n    const [, selector, html] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    const tmpl = document.createElement(\"template\");\n    tmpl.innerHTML = decodeURIComponent(html);\n    el.append(tmpl.content);\n  }\n  applyAttr(transformation: DxAttr) {\n    const [, selector, attr, value] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => {\n      if (value === null) return el.removeAttribute(attr);\n      el.setAttribute(attr, value);\n    });\n  }\n  applyCall(transformation: DxCall) {\n    const [, selector, method, ...args] = transformation;\n    const el: any = this.querySelector(selector);\n    if (!el) return;\n    el[method](...args);\n  }\n  applyEventListener(transformation: DxClick) {\n    const [event, selector, action] = transformation;\n    console.log(transformation);\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    for (let i = 0; i < els.length; i++) {\n      const el = els[i];\n      const cb = (e: any) => {\n        e.preventDefault();\n        this.handleClientEvent(action);\n      };\n      el.removeEventListener(event, cb);\n      el.addEventListener(event, cb);\n    }\n  }\n  applyDispatch(transformation: DxDispatch) {\n    const [, action, timeout = 0] = transformation;\n    clearTimeout(this.timeouts[action]);\n    this.timeouts[action] = setTimeout(\n      () => this.handleClientEvent(action),\n      timeout\n    );\n  }\n  applyGet(transformation: DxGet) {\n    const [, url] = transformation;\n    fetch(url, {\n      method: \"GET\",\n    }).then((r) => r.json().then((d) => this.transform(\"entry\", d)));\n  }\n  applyJs(transformation: DxJs) {\n    const [, method, ...args] = transformation;\n    (<any>window)[method](...args);\n  }\n  applyPost(transformation: DxPost) {\n    const [, url, ...data] = transformation;\n    const body: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const [key, selector, val] = data[i];\n      const el: any = this.querySelector(selector);\n      if (!el) return;\n      body[key] = el[val];\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    }).then((r) => r.json().then((d) => this.transform(\"entry\", d)));\n  }\n  applyReplace(transformation: DxReplace) {\n    const [, selector, content] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    const parent = el.parentElement;\n    if (!parent) return;\n    const tmpl = document.createElement(\"template\");\n    tmpl.innerHTML = decodeURIComponent(content);\n    parent.replaceChild(tmpl.content, el);\n  }\n  applyState(transformation: DxState) {\n    const [, state] = transformation;\n    const hasEntry = this.config.states[state].entry;\n    if (hasEntry) this.transform(\"entry\", this.config.states[state].entry);\n    this.state = state;\n  }\n  applyText(transformation: DxText) {\n    const [, selector, text] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => (el.textContent = text));\n  }\n  applyWait(transformation: DxWait) {\n    const [, timeInSeconds, action] = transformation;\n    const startTime = new Date().getTime();\n    while (new Date().getTime() - startTime < timeInSeconds) {\n      // Do nothing\n    }\n    if (action) this.handleClientEvent(action);\n  }\n  /**\n   * Dispatch an action to the state machine manually\n   * @param action name of action to dispatch\n   */\n  dispatch(action: string) {\n    this.handleClientEvent(action);\n  }\n  /**\n   * Handle a client event\n   * @param action name of action to dispatch\n   */\n  handleClientEvent(action: string) {\n    this.transform(action, this.config.states[this.state][action] as DX[]);\n  }\n  /**\n   * Handle a server event\n   * @param se server event\n   */\n  handleServerEvent(se: { action: string } & any) {\n    const { action } = se;\n    const transformations = this.config.states[this.state][action].reduce(\n      (acc, t) => [...acc, t],\n      [] as DX[]\n    );\n    this.transform(action, transformations);\n  }\n  init(config: Config) {\n    this.config = config;\n    const that = this;\n\n    // Apply listeners\n    const listeners = this.config.listeners ?? [];\n\n    const register = () => {\n      for (let i = 0; i < listeners.length; i++) {\n        const [selector, event, action] = listeners[i];\n        const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n        for (let j = 0; j < els.length; j++) {\n          const el = els[j];\n          const cb = (e: any) => {\n            e.preventDefault();\n            if (e.target !== el) return;\n            this.handleClientEvent(action);\n          };\n          that.removeEventListener(event, cb);\n          that.addEventListener(event, cb);\n        }\n      }\n    };\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\" && mutation.addedNodes) register();\n      });\n    });\n\n    observer.observe(this, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    register();\n\n    // Apply initial state\n    const initState = config.states[config.initialState];\n    this.state = config.initialState;\n    if (initState.entry) this.transform(\"entry\", initState.entry);\n  }\n  sub(s: (state: string, action: string, dx: DX) => void) {\n    this.subs.push(s);\n  }\n  transform(action: string, transformations: DX[]) {\n    if (!transformations) return;\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [trait] = transformation;\n      const traitMap = {\n        append: this.applyAppend,\n        attr: this.applyAttr,\n        click: this.applyEventListener,\n        call: this.applyCall,\n        dispatch: this.applyDispatch,\n        js: this.applyJs,\n        get: this.applyGet,\n        post: this.applyPost,\n        replace: this.applyReplace,\n        state: this.applyState,\n        submit: this.applyEventListener,\n        text: this.applyText,\n        wait: this.applyWait,\n      };\n      (traitMap as any)[trait](transformation);\n      this.subs.forEach((s) => s(this.state, action, transformation));\n    }\n  }\n}\n\ncustomElements.define(\"dx-state\", DomState);\n"],
  "mappings": "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",
  "names": ["DomState", "src", "r", "transformation", "selector", "html", "el", "tmpl", "attr", "value", "method", "args", "event", "action", "els", "i", "cb", "e", "timeout", "url", "d", "data", "body", "key", "val", "content", "parent", "state", "text", "timeInSeconds", "startTime", "se", "transformations", "acc", "t", "config", "that", "listeners", "register", "j", "mutations", "mutation", "initState", "s", "trait"]
}
