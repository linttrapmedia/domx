{
  "version": 3,
  "sources": ["../../../src/components/dx-state.ts"],
  "sourcesContent": ["type DxEvent = [dx: \"evt\", evt: string];\ntype DxAppend = [dx: \"append\", selector: string, html: string];\ntype DxAttr = [dx: \"attr\", selector: string, attr: string, value: string];\ntype DxClick = [dx: \"click\", selector: string, evt: string];\ntype DxCall = [dx: \"call\", selector: string, method: string, ...args: (string | number)[]];\ntype DxDispatch = [dx: \"dispatch\", evt: string, timeout?: number];\ntype DxGet = [dx: \"get\", url: string];\ntype DxHistory = [dx: \"history\", method: string, ...args: (string | number)[]];\ntype DxWin = [dx: \"win\", method: string, ...args: (string | number)[]];\ntype DxPost = [\n  dx: \"post\",\n  url: string,\n  ...data: [key: string, selector: string, val: \"value\" | \"dataset\" | \"formData\"][]\n];\ntype DxReplace = [dx: \"replace\", selector: string, content: string];\ntype DxServer = [dx: \"server\", key: string];\ntype DxState = [dx: \"state\", state: string];\ntype DxSubmit = [dx: \"submit\", selector: string, evt: string];\ntype DxText = [dx: \"text\", selector: string, text: string];\ntype DxWait = [dx: \"wait\", milliseconds: number, evt: string];\n\ntype DX =\n  | DxAppend\n  | DxAttr\n  | DxClick\n  | DxCall\n  | DxDispatch\n  | DxWin\n  | DxGet\n  | DxPost\n  | DxReplace\n  | DxServer\n  | DxState\n  | DxSubmit\n  | DxText\n  | DxWait;\n\ntype Config = {\n  actions: Record<string, DX[]>;\n  initialState: string;\n  listeners: [selector: string, event: string, evt: string][];\n  states: Record<string, Record<string | \"entry\", DX[]>>;\n};\n\nexport class DomxState extends HTMLElement {\n  state: string = \"\";\n  config: Config = {\n    actions: {},\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  subs: ((state: string, evt: string, dx: DX) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  constructor() {\n    super();\n    this.applyAction = this.applyAction.bind(this);\n    this.applyAppend = this.applyAppend.bind(this);\n    this.applyAttr = this.applyAttr.bind(this);\n    this.applyCall = this.applyCall.bind(this);\n    this.applyDispatch = this.applyDispatch.bind(this);\n    this.applyEventListener = this.applyEventListener.bind(this);\n    this.applyGet = this.applyGet.bind(this);\n    this.applyHistory = this.applyHistory.bind(this);\n    this.applyPost = this.applyPost.bind(this);\n    this.applyReplace = this.applyReplace.bind(this);\n    this.applyState = this.applyState.bind(this);\n    this.applyText = this.applyText.bind(this);\n    this.applyWait = this.applyWait.bind(this);\n    this.applyWin = this.applyWin.bind(this);\n    this.dispatch = this.dispatch.bind(this);\n    this.handleClientEvent = this.handleClientEvent.bind(this);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.handleServerEvent = this.handleServerEvent.bind(this);\n    this.init = this.init.bind(this);\n    this.sub = this.sub.bind(this);\n    this.transform = this.transform.bind(this);\n  }\n  applyAction(transformation: DxEvent) {\n    const [, action] = transformation;\n    this.config.actions[action].forEach((t) => this.handleEvent(action, t));\n  }\n  applyAppend(transformation: DxAppend) {\n    const [, selector, html] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    const tmpl = document.createElement(\"template\");\n    tmpl.innerHTML = decodeURIComponent(html);\n    el.append(tmpl.content);\n  }\n  applyAttr(transformation: DxAttr) {\n    const [, selector, attr, value] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => {\n      if (value === null) return el.removeAttribute(attr);\n      el.setAttribute(attr, value);\n    });\n  }\n  applyCall(transformation: DxCall) {\n    const [, selector, method, ...args] = transformation;\n    const el: any = this.querySelector(selector);\n    if (!el) return;\n    el[method](...args);\n  }\n  applyEventListener(transformation: DxClick) {\n    const [event, selector, evt] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    for (let i = 0; i < els.length; i++) {\n      const el = els[i];\n      const cb = (e: any) => {\n        e.preventDefault();\n        this.handleClientEvent(evt);\n      };\n      el.removeEventListener(event, cb);\n      el.addEventListener(event, cb);\n    }\n  }\n  applyDispatch(transformation: DxDispatch) {\n    const [, evt, timeout = 0] = transformation;\n    clearTimeout(this.timeouts[evt]);\n    this.timeouts[evt] = setTimeout(() => this.handleClientEvent(evt), timeout);\n  }\n  applyGet(transformation: DxGet) {\n    const [, url] = transformation;\n    fetch(url, {\n      method: \"GET\",\n    }).then((r) => r.json().then((d) => this.handleEvent(\"entry\", d)));\n  }\n  applyHistory(transformation: DxHistory) {\n    const [, method, ...args] = transformation;\n    (<any>history)[method](...args);\n  }\n  applyWin(transformation: DxWin) {\n    const [, method, ...args] = transformation;\n    (<any>window)[method](...args);\n  }\n  applyPost(transformation: DxPost) {\n    const [, url, ...data] = transformation;\n    const body: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const [key, selector, val] = data[i];\n      const el: any = this.querySelector(selector);\n      if (!el) return;\n      body[key] = el[val];\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    }).then((r) => r.json().then((d) => this.handleEvent(\"entry\", d)));\n  }\n  applyReplace(transformation: DxReplace) {\n    const [, selector, content] = transformation;\n    const el = this.querySelector(selector);\n    if (!el) return;\n    el.innerHTML = \"\";\n    el.innerHTML = decodeURIComponent(content);\n  }\n  applyState(transformation: DxState) {\n    const [, state] = transformation;\n    const hasEntry = this.config.states[state].entry;\n    if (hasEntry) this.handleEvent(\"entry\", ...this.config.states[state].entry);\n    this.state = state;\n  }\n  applyText(transformation: DxText) {\n    const [, selector, text] = transformation;\n    const els = this.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n    els.forEach((el) => (el.textContent = text));\n  }\n  applyWait(transformation: DxWait) {\n    const [, timeInSeconds, evt] = transformation;\n    const startTime = new Date().getTime();\n    while (new Date().getTime() - startTime < timeInSeconds) {\n      // Do nothing\n    }\n    if (evt) this.handleClientEvent(evt);\n  }\n  connectedCallback() {\n    const src = this.getAttribute(\"src\");\n    if (src) return fetch(src).then((r) => r.json().then(this.init));\n    const obj: any = this.getAttribute(\"obj\");\n    if (obj) return this.init(window[obj] as any);\n    return;\n  }\n  /**\n   * Dispatch an evt to the state machine manually\n   * @param evt name of evt to dispatch\n   */\n  dispatch(evt: string) {\n    this.handleClientEvent(evt);\n  }\n  /**\n   * Handle a client event\n   * @param evt name of evt to dispatch\n   */\n  handleClientEvent(evt: string) {\n    this.handleEvent(evt, ...(this.config.states[this.state][evt] as DX[]));\n  }\n  /**\n   * Handle a server event\n   * @param se server event\n   */\n  handleServerEvent(se: { evt: string } & any) {\n    const { evt } = se;\n    const transformations = this.config.states[this.state][evt].reduce((acc, t) => [...acc, t], [] as DX[]);\n    this.handleEvent(evt, ...transformations);\n  }\n  /**\n   * Transform the state machine\n   * @param evt name of application to run\n   * @param transformations transformations to apply\n   */\n  handleEvent(evt: string, ...transformations: DX[]) {\n    if (!transformations) return;\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [trait] = transformation;\n      this.transform(trait, transformation);\n      this.subs.forEach((s) => s(this.state, evt, transformation));\n    }\n  }\n  init(config: Config) {\n    this.config = config;\n\n    // Apply listeners\n    const listeners = this.config.listeners ?? [];\n\n    const register = () => {\n      for (let i = 0; i < listeners.length; i++) {\n        const [selector, event, evt] = listeners[i];\n        const selectorIfNotRegistered = `${selector}:not([data-dx-state=\"registered\"])`;\n        const els = this.querySelectorAll(selectorIfNotRegistered) as NodeListOf<HTMLElement>;\n        for (let j = 0; j < els.length; j++) {\n          const el = els[j];\n          const cb = (e: any) => {\n            e.preventDefault();\n            if (e.target !== el) return;\n            this.handleClientEvent(evt);\n          };\n          el.addEventListener(event, cb);\n          el.dataset.dxState = \"registered\";\n        }\n      }\n    };\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\" && mutation.addedNodes) register();\n      });\n    });\n\n    observer.observe(this, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    register();\n\n    // Apply initial state\n    const initState = config.states[config.initialState];\n    this.state = config.initialState;\n    if (initState.entry) this.handleEvent(\"entry\", ...initState.entry);\n  }\n  sub(s: (state: string, evt: string, dx: DX) => void) {\n    this.subs.push(s);\n  }\n  transform(trait: string, transformation: DX) {\n    const traitMap = {\n      action: this.applyAction,\n      append: this.applyAppend,\n      attr: this.applyAttr,\n      call: this.applyCall,\n      click: this.applyEventListener,\n      dispatch: this.applyDispatch,\n      get: this.applyGet,\n      history: this.applyHistory,\n      post: this.applyPost,\n      replace: this.applyReplace,\n      server: () => {},\n      state: this.applyState,\n      submit: this.applyEventListener,\n      text: this.applyText,\n      wait: this.applyWait,\n      win: this.applyWin,\n    };\n    (traitMap as any)[trait](transformation);\n  }\n}\n\ncustomElements.define(\"dx-state\", DomxState);\n\nexport class DomxStateIf extends HTMLElement {\n  state: string = \"\";\n  is: string = \"\";\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot!.innerHTML = \"<slot></slot>\";\n  }\n  connectedCallback() {\n    const state = this.getAttribute(\"state\");\n    const is = this.getAttribute(\"is\");\n    if (!state || !is) return;\n    (document.querySelector(`dx-state[name=\"${state}\"]`) as DomxState).sub((state: string) => {\n      this.style.display = state === is ? \"inherit\" : \"none\";\n    });\n  }\n}\n\ncustomElements.define(\"dx-state-if\", DomxStateIf);\n"],
  "mappings": "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",
  "names": ["state"]
}
