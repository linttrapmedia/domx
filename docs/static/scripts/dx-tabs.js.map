{
  "version": 3,
  "sources": ["../../../src/helpers.ts", "../../../src/components/dx-tabs.ts"],
  "sourcesContent": ["export function cssObjectToString(css: any): string {\n  let str = \"\";\n  for (let key in css) {\n    str += `${key}: ${css[key]};`;\n  }\n  return str;\n}\n\nexport function mergeByIndex(arr1: any[], arr2: any[]): any[] {\n  let merged: any[] = [...arr1];\n  for (let i = 0; i < arr2.length; i++) {\n    if (i < merged.length) {\n      merged[i] = arr2[i];\n    } else {\n      merged.push(arr2[i]);\n    }\n  }\n  return merged;\n}\n\nexport function attachShadow(el: HTMLElement, init: ShadowRootInit) {\n  el.attachShadow(init);\n}\n\nexport function attachStyles(el: HTMLElement, styles: string) {\n  let sheet = new CSSStyleSheet();\n  sheet.replace(styles);\n  el.shadowRoot!.adoptedStyleSheets = [sheet];\n  return sheet;\n}\n\nexport function attachTemplate(el: HTMLElement, template: string) {\n  const templateEl = document.createElement(\"template\");\n  templateEl.innerHTML = template;\n  const node = templateEl.content.cloneNode(true);\n  el.shadowRoot!.appendChild(node);\n  return node;\n}\n", "import { attachShadow, attachStyles, attachTemplate } from \"../helpers\";\n\nconst DomTabBtnStyles = `\n:host {\n  background-color: var(--dx-color-primary-bg-light, var(--dx-tabs-bg, transparent));\n  border-bottom-width: var(--tabs-btn-border-width, 5px);\n  border-bottom-style: solid;\n  border-bottom-color: transparent;\n  font-family: var(--tabs-btn-font-family, Arial);\n  font-size: var(--tabs-btn-font-size, 14px);\n  font-weight: var(--tabs-btn-font-weight, normal);\n  color: var(--tabs-btn-color, white);\n  cursor: pointer;\n  outline: none;\n  opacity: 0.35;\n  padding: var(--tabs-btn-padding, 10px);\n}\n\n:host(:hover),\n:host([active]){\n  border-bottom-color: var(--tabs-btn-border-color, white);\n  opacity: 1;\n  transition: border-bottom-color 0.25s ease-in-out;\n}\n`;\n\nclass DomTabBtn extends HTMLElement {\n  constructor() {\n    super();\n    attachShadow(this, { mode: \"open\" });\n    attachStyles(this, DomTabBtnStyles);\n    attachTemplate(this, `<slot></slot>`);\n  }\n  connectedCallback() {\n    this.slot = \"tabs\";\n    const parent = this.parentElement as DomTabs;\n    if (!parent) return;\n    this.addEventListener(\"click\", () => parent.setActiveTab(this));\n  }\n}\n\ncustomElements.define(\"dx-tab-btn\", DomTabBtn);\n\nconst DomTabPanelStyles = `\n:host {\n  display: none;\n  width: 100%;\n}\n:host([active]) {\n  display: block;\n}\n`;\n\nclass DomTabPanel extends HTMLElement {\n  constructor() {\n    super();\n    attachShadow(this, { mode: \"open\" });\n    attachStyles(this, DomTabPanelStyles);\n    attachTemplate(this, \"<slot></slot>\");\n  }\n  connectedCallback() {\n    this.slot = \"panels\";\n  }\n}\n\ncustomElements.define(\"dx-tab-panel\", DomTabPanel);\n\nconst domTabsStyles = `\n\n:host {\n  width: 100%;\n  display: flex;\n  flex-direction:column;\n  width: 100%;\n}\n\n[name=\"tabs\"] {\n  align-items: center;\n  background-color: var(--tabs-panel-bg, transparent);\n  background-image: linear-gradient(to top, var(--tabs-btn-border-color-inactive, rgba(0,0,0,0.15)) 5px, transparent 5px);\n  background-repeat: no-repeat;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  overflow-x: auto;\n  width: 100%;\n}\n\n[name=\"panels\"] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  overflow-x: auto;\n}\n\n `;\n\nconst domTabsTemplate = `<div><slot name=\"tabs\"></slot><slot name=\"panels\"></slot></div>`;\n\nclass DomTabs extends HTMLElement {\n  activeTab: string = \"\";\n  constructor() {\n    super();\n    attachShadow(this, { mode: \"open\" });\n    attachStyles(this, domTabsStyles);\n    attachTemplate(this, domTabsTemplate);\n    this.setActiveTab = this.setActiveTab.bind(this);\n  }\n  setActiveTab(tabBtn: DomTabBtn) {\n    const tabs = this.querySelectorAll(\"dx-tab-btn\");\n    const panels = this.querySelectorAll(\"dx-tab-panel\");\n    tabs.forEach((t) => t.removeAttribute(\"active\"));\n    panels.forEach((p) => p.removeAttribute(\"active\"));\n    tabBtn.setAttribute(\"active\", \"\");\n    const panelId = tabBtn.getAttribute(\"panel\");\n    const panel = this.querySelector(`dx-tab-panel#${panelId}`);\n    panel!.setAttribute(\"active\", \"\");\n  }\n  // addTab(t: DomTab) {\n  //   const tabs = this.shadowRoot!.querySelector(\".tabs\");\n  //   const button = document.createElement(\"button\");\n  //   const isActive = t.getAttribute(\"active\") !== null;\n  //   const title = t.getAttribute(\"title\") || \"\";\n  //   const content = t.innerHTML;\n\n  //   if (Boolean(isActive)) this.activeTab = title;\n\n  //   button.classList.add(\"tab\");\n  //   if (isActive) button.classList.add(\"tab--active\");\n  //   button.textContent = title;\n  //   tabs!.appendChild(button);\n  //   button.addEventListener(\"click\", () => this.setActiveTab(title, content));\n\n  //   if (isActive) this.setActiveTab(title, content);\n  // }\n  // setActiveTab(title: string, content: string) {\n  //   this.activeTab = title;\n  //   const tabs = this.shadowRoot!.querySelectorAll(\".tab\");\n  //   const slide = this.shadowRoot!.querySelector(\".slide\");\n  //   console.log(title, content);\n  //   tabs.forEach((t) => {\n  //     if (t.textContent === this.activeTab) {\n  //       t.classList.add(\"tab--active\");\n  //     } else {\n  //       t.classList.remove(\"tab--active\");\n  //     }\n  //   });\n  //   slide!.innerHTML = content;\n  // }\n}\n\ncustomElements.define(\"dx-tabs\", DomTabs);\n"],
  "mappings": "mBAoBO,SAASA,EAAaC,EAAiBC,EAAsB,CAClED,EAAG,aAAaC,CAAI,CACtB,CAEO,SAASC,EAAaF,EAAiBG,EAAgB,CAC5D,IAAIC,EAAQ,IAAI,cAChB,OAAAA,EAAM,QAAQD,CAAM,EACpBH,EAAG,WAAY,mBAAqB,CAACI,CAAK,EACnCA,CACT,CAEO,SAASC,EAAeL,EAAiBM,EAAkB,CAChE,IAAMC,EAAa,SAAS,cAAc,UAAU,EACpDA,EAAW,UAAYD,EACvB,IAAME,EAAOD,EAAW,QAAQ,UAAU,EAAI,EAC9C,OAAAP,EAAG,WAAY,YAAYQ,CAAI,EACxBA,CACT,CCnCA,IAAMC,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBlBC,EAAN,cAAwB,WAAY,CAClC,aAAc,CACZ,MAAM,EACNC,EAAa,KAAM,CAAE,KAAM,MAAO,CAAC,EACnCC,EAAa,KAAMH,CAAe,EAClCI,EAAe,KAAM,eAAe,CACtC,CACA,mBAAoB,CAClB,KAAK,KAAO,OACZ,IAAMC,EAAS,KAAK,cAChB,CAACA,GACL,KAAK,iBAAiB,QAAS,IAAMA,EAAO,aAAa,IAAI,CAAC,CAChE,CACF,EAEA,eAAe,OAAO,aAAcJ,CAAS,EAE7C,IAAMK,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpBC,EAAN,cAA0B,WAAY,CACpC,aAAc,CACZ,MAAM,EACNL,EAAa,KAAM,CAAE,KAAM,MAAO,CAAC,EACnCC,EAAa,KAAMG,CAAiB,EACpCF,EAAe,KAAM,eAAe,CACtC,CACA,mBAAoB,CAClB,KAAK,KAAO,QACd,CACF,EAEA,eAAe,OAAO,eAAgBG,CAAW,EAEjD,IAAMC,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgChBC,EAAkB,kEAElBC,EAAN,cAAsB,WAAY,CAEhC,aAAc,CACZ,MAAM,EAFR,eAAoB,GAGlBR,EAAa,KAAM,CAAE,KAAM,MAAO,CAAC,EACnCC,EAAa,KAAMK,CAAa,EAChCJ,EAAe,KAAMK,CAAe,EACpC,KAAK,aAAe,KAAK,aAAa,KAAK,IAAI,CACjD,CACA,aAAaE,EAAmB,CAC9B,IAAMC,EAAO,KAAK,iBAAiB,YAAY,EACzCC,EAAS,KAAK,iBAAiB,cAAc,EACnDD,EAAK,QAASE,GAAMA,EAAE,gBAAgB,QAAQ,CAAC,EAC/CD,EAAO,QAASE,GAAMA,EAAE,gBAAgB,QAAQ,CAAC,EACjDJ,EAAO,aAAa,SAAU,EAAE,EAChC,IAAMK,EAAUL,EAAO,aAAa,OAAO,EAC7B,KAAK,cAAc,gBAAgBK,GAAS,EACnD,aAAa,SAAU,EAAE,CAClC,CAgCF,EAEA,eAAe,OAAO,UAAWN,CAAO",
  "names": ["attachShadow", "el", "init", "attachStyles", "styles", "sheet", "attachTemplate", "template", "templateEl", "node", "DomTabBtnStyles", "DomTabBtn", "attachShadow", "attachStyles", "attachTemplate", "parent", "DomTabPanelStyles", "DomTabPanel", "domTabsStyles", "domTabsTemplate", "DomTabs", "tabBtn", "tabs", "panels", "t", "p", "panelId"]
}
