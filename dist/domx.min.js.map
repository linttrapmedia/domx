{
  "version": 3,
  "sources": ["../src/domx.ts"],
  "sourcesContent": ["function addClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.add(className));\n}\n\nfunction addEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n    el.addEventListener(event, cb);\n  });\n}\n\nfunction appendTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.append(tmpl.content);\n}\n\nfunction dispatchTransformer(domx: Domx, event: string, timeout: number = 0) {\n  clearTimeout(domx.timeouts[event]);\n  domx.timeouts[event] = setTimeout(() => domx.dispatch(event), timeout);\n}\n\nfunction historyTransformer(_: Domx, state: string, title: string, url: string) {\n  window.history.pushState(state, title, url);\n}\n\nfunction getRequestTransformer(domx: Domx, url: string) {\n  fetch(url, {\n    method: \"GET\",\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nfunction innerHTMLTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.innerHTML = decodeURIComponent(html);\n}\n\nfunction locationTransformer(_: Domx, url: string) {\n  window.location.href = url;\n}\n\nfunction postRequestTransformer(domx: Domx, formSelector: string) {\n  const form = document.querySelector(formSelector) as HTMLFormElement;\n  const formData = new FormData(form);\n  fetch(form.action, {\n    body: formData,\n    method: \"POST\",\n  }).then((r) => r.json().then((transformations) => domx.transform(transformations)));\n}\n\nfunction textContentTransformer(_: Domx, selector: string, text: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  el.textContent = decodeURIComponent(text);\n}\n\nfunction removeAttributeTransformer(_: Domx, selector: string, attr: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.removeAttribute(attr));\n}\n\nfunction removeEventListenerTransformer(domx: Domx, selector: string, event: string, fsmEvent: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    const cb = (e: any) => {\n      e.preventDefault();\n      if (e.target !== el) return;\n      domx.dispatch(fsmEvent);\n    };\n    el.removeEventListener(event, cb);\n  });\n}\n\nfunction removeClassTransformer(_: Domx, selector: string, className: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => el.classList.remove(className));\n}\n\nfunction replaceTransformer(_: Domx, selector: string, html: string) {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const tmpl = document.createElement(\"template\");\n  tmpl.innerHTML = decodeURIComponent(html);\n  el.replaceWith(tmpl.content);\n}\n\nfunction setAttributeTransformer(_: Domx, selector: string, attr: string, value: string) {\n  const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n  els.forEach((el) => {\n    if (value === null) return el.removeAttribute(attr);\n    el.setAttribute(attr, value);\n  });\n}\n\nfunction waitTransformer(_: Domx, timeout: number) {\n  const startTime = new Date().getTime();\n  while (new Date().getTime() - startTime < timeout) {\n    // Do nothing\n  }\n}\n\nfunction windowTransformer(_: Domx, method: string, ...args: any) {\n  (window as any)[method](...args);\n}\n\nfunction stateTransformer(domx: Domx, state: string) {\n  domx.state = state;\n  if (domx.fsm.states[state].entry) domx.dispatch(\"entry\");\n}\n\ntype Tail<T extends any[]> = T extends [any, ...infer Rest] ? Rest : never;\ntype TxArgs<F extends (...args: any) => any> = Tail<Parameters<F>>;\ntype TransformerList = (\n  | [operation: \"addClass\", ...TxArgs<typeof addClassTransformer>]\n  | [operation: \"addEventListener\", ...TxArgs<typeof addEventListenerTransformer>]\n  | [operation: \"append\", ...TxArgs<typeof appendTransformer>]\n  | [operation: \"dispatch\", ...TxArgs<typeof dispatchTransformer>]\n  | [operation: \"innerHTML\", ...TxArgs<typeof innerHTMLTransformer>]\n  | [operation: \"history\", ...TxArgs<typeof historyTransformer>]\n  | [operation: \"get\", ...TxArgs<typeof getRequestTransformer>]\n  | [operation: \"location\", ...TxArgs<typeof locationTransformer>]\n  | [operation: \"post\", ...TxArgs<typeof postRequestTransformer>]\n  | [operation: \"removeAttribute\", ...TxArgs<typeof removeAttributeTransformer>]\n  | [operation: \"removeClass\", ...TxArgs<typeof removeClassTransformer>]\n  | [operation: \"removeEventListener\", ...TxArgs<typeof removeEventListenerTransformer>]\n  | [operation: \"replace\", ...TxArgs<typeof replaceTransformer>]\n  | [operation: \"setAttribute\", ...TxArgs<typeof setAttributeTransformer>]\n  | [operation: \"state\", ...TxArgs<typeof stateTransformer>]\n  | [operation: \"textContent\", ...TxArgs<typeof textContentTransformer>]\n  | [operation: \"wait\", ...TxArgs<typeof waitTransformer>]\n  | [operation: \"window\", ...TxArgs<typeof windowTransformer>]\n)[];\n\ntype FSM = {\n  initialState: string;\n  listeners: [selector: string, event: string, evt: string][];\n  states: Record<string, Record<string, TransformerList>>;\n};\nexport class Domx {\n  state: string = \"\";\n  fsm: FSM = {\n    initialState: \"\",\n    listeners: [],\n    states: {},\n  };\n  subs: ((evt: string, prevState: string, nextState: string) => void)[] = [];\n  timeouts: Record<string, NodeJS.Timeout> = {};\n  tranformers: Record<string, (instance: Domx, ...args: any) => void> = {};\n  /**\n   * dynamically add a transformer\n   * @param name name of transformer\n   * @param cb callback\n   */\n  addTransformer(name: string, cb: (...args: any) => void) {\n    this.tranformers[name] = cb;\n    return this;\n  }\n\n  constructor(fsm?: FSM) {\n    this.dispatch = this.dispatch.bind(this);\n    this.init = this.init.bind(this);\n    this.registerEventListeners = this.registerEventListeners.bind(this);\n    this.sub = this.sub.bind(this);\n    this.transform = this.transform.bind(this);\n\n    // ==============================\n    // Built-in transformers\n    // ==============================\n\n    this.addTransformer(\"addClass\", addClassTransformer);\n    this.addTransformer(\"addEventListener\", addEventListenerTransformer);\n    this.addTransformer(\"append\", appendTransformer);\n    this.addTransformer(\"dispatch\", dispatchTransformer);\n    this.addTransformer(\"innerHTML\", innerHTMLTransformer);\n    this.addTransformer(\"history\", historyTransformer);\n    this.addTransformer(\"get\", getRequestTransformer);\n    this.addTransformer(\"location\", locationTransformer);\n    this.addTransformer(\"post\", postRequestTransformer);\n    this.addTransformer(\"removeAttribute\", removeAttributeTransformer);\n    this.addTransformer(\"removeClass\", removeClassTransformer);\n    this.addTransformer(\"removeEventListener\", removeEventListenerTransformer);\n    this.addTransformer(\"replace\", replaceTransformer);\n    this.addTransformer(\"setAttribute\", setAttributeTransformer);\n    this.addTransformer(\"state\", stateTransformer);\n    this.addTransformer(\"textContent\", textContentTransformer);\n    this.addTransformer(\"wait\", waitTransformer);\n    this.addTransformer(\"window\", windowTransformer);\n\n    if (fsm) document.addEventListener(\"DOMContentLoaded\", () => this.init(fsm));\n  }\n\n  /**\n   * trigger an event\n   * @param evt name of event\n   */\n  dispatch(evt: string) {\n    const transformations = this.fsm.states[this.state][evt];\n    if (!transformations) return;\n    const prevState = this.state;\n    // run transformations\n    this.transform(transformations, () => {\n      this.subs.forEach((s) => s(evt, prevState, this.state));\n    });\n  }\n\n  /**\n   * initialize the state machine\n   * @param fsm state machine\n   */\n  init(fsm: FSM) {\n    // set fsm\n    this.fsm = fsm;\n\n    // Register event listeners\n    this.registerEventListeners();\n\n    // Apply initial state\n    const initState = fsm.states[fsm.initialState];\n    this.state = fsm.initialState;\n\n    // run entry transformation if it exists\n    if (initState.entry) this.dispatch(\"entry\");\n  }\n\n  /**\n   * register event listeners\n   */\n  registerEventListeners() {\n    const listeners = this.fsm.listeners ?? [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      const [selector, eventListener, fsmEvent] = listeners[i];\n      const els = document.querySelectorAll(selector) as NodeListOf<HTMLElement>;\n      // add event listeners to all registered elements\n      for (let j = 0; j < els.length; j++) {\n        const el = els[j];\n        const cb = (e: any) => {\n          e.preventDefault();\n          if (e.target !== el) return;\n          // event listeners can only do one thing, dispatch an event\n          // all other transformations should be done in the state machine\n          this.dispatch(fsmEvent);\n        };\n        // prevent duplicate event listeners\n        el.removeEventListener(eventListener, cb);\n        el.addEventListener(eventListener, cb);\n      }\n    }\n  }\n\n  /**\n   * subscribe to state changes\n   * @param s callback\n   * @returns\n   */\n  sub(s: (event: string, prevState: string, nextState: string) => void) {\n    this.subs.push(s);\n    return () => this.unsub(s);\n  }\n\n  /**\n   * run list of transformations\n   * @param tx transformation list\n   * @param cb callback\n   * @returns\n   */\n  transform(transformations: TransformerList = [], cb?: () => void) {\n    // get transformations from current state\n    if (!transformations) return;\n\n    // apply each transformation\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const [transformer, ...transformerArgs] = transformation;\n      const transformerFn = this.tranformers[transformer];\n      if (!transformerFn) throw new Error(`Unknown transformer: ${transformer}`);\n      transformerFn(this, ...transformerArgs);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * unsubscribe from state changes\n   * @param s callback\n   */\n  unsub: (s: (state: string, evt: string, transformations: any) => void) => void = (s) => {\n    this.subs = this.subs.filter((sub) => sub !== s);\n  };\n}\n\nclass DomxCustomElement extends HTMLElement {\n  instance: Domx = new Domx();\n  constructor() {\n    super();\n    this.registerLocalFSM = this.registerLocalFSM.bind(this);\n    this.registerRemoteFSM = this.registerRemoteFSM.bind(this);\n    let slot = document.createElement(\"slot\");\n    slot.style.display = \"none\";\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(slot);\n    slot.addEventListener(\"slotchange\", () => this.registerLocalFSM(slot));\n  }\n\n  connectedCallback() {\n    if (this.getAttribute(\"src\")) this.registerRemoteFSM();\n  }\n\n  registerLocalFSM(slot: HTMLSlotElement) {\n    const nodes = slot.assignedNodes();\n    const local: any = nodes[0].nodeValue;\n    if (local) return this.instance.init(JSON.parse(local));\n  }\n\n  registerRemoteFSM() {\n    const remote = this.getAttribute(\"src\");\n    if (remote) return fetch(remote).then((r) => r.json().then(this.instance.init));\n  }\n}\n\ncustomElements.define(\"dom-x\", DomxCustomElement);\n(window as any).Domx = Domx;\n"],
  "mappings": "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",
  "names": ["addClassTransformer", "_", "selector", "className", "el", "addEventListenerTransformer", "domx", "event", "fsmEvent", "cb", "e", "appendTransformer", "html", "tmpl", "dispatchTransformer", "timeout", "historyTransformer", "state", "title", "url", "getRequestTransformer", "r", "transformations", "innerHTMLTransformer", "locationTransformer", "postRequestTransformer", "formSelector", "form", "formData", "textContentTransformer", "text", "removeAttributeTransformer", "attr", "removeEventListenerTransformer", "removeClassTransformer", "replaceTransformer", "setAttributeTransformer", "value", "waitTransformer", "startTime", "windowTransformer", "method", "args", "stateTransformer", "Domx", "fsm", "s", "sub", "name", "evt", "prevState", "initState", "listeners", "i", "eventListener", "els", "j", "transformation", "transformer", "transformerArgs", "transformerFn", "DomxCustomElement", "slot", "local", "remote"]
}
