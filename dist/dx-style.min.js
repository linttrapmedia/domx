"use strict";(()=>{var d=class extends HTMLElement{constructor(){super();this.baseStyles=[["display","inherit"]];this.slottedStyles=[];this.psuedoStyles={};this.styleSheet=new CSSStyleSheet;this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="<slot></slot>",this.render=this.render.bind(this),this.renderCss=this.renderCss.bind(this),this.shadowRoot.adoptedStyleSheets=[this.styleSheet],new MutationObserver(s=>{s.forEach(n=>{n.type==="attributes"&&this.render()})}).observe(this,{attributes:!0})}connectedCallback(){this.render(),window.addEventListener("resize",this.render)}disconnectedCallback(){window.removeEventListener("resize",this.render)}renderCss(){let i=[],s=this.getAttributeNames();for(let e=0;e<s.length;e++){let t=s[e],[o,r]=t.split(":"),[h,l="0"]=o.split("--"),a=this.getAttribute(t);i.push([l,h,a,r])}let n=i.sort((e,t)=>e[3]?1:-1).sort((e,t)=>Number(e[0])-Number(t[0])).map(([e,t,o,r])=>`@media (min-width: ${e}px) { ::slotted${r?`(*:${r})`:"(*)"} { ${t}:${o}; }}`).join(`
`);return":host { display:inherit; } "+n}render(){this.styleSheet.replace(this.renderCss())}};customElements.define("dx-style",d);})();
//# sourceMappingURL=dx-style.min.js.map
