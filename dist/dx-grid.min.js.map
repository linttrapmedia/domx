{
  "version": 3,
  "sources": ["../src/components/dx-grid.ts"],
  "sourcesContent": ["export class DomxGrid extends HTMLElement {\n  baseStyles: string = `:host { box-sizing: border-box; display: grid; }`;\n  psuedoStyles: Record<string, [string, string][]> = {};\n  styleSheet: CSSStyleSheet = new CSSStyleSheet();\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot!.innerHTML = \"<slot></slot>\";\n    this.render = this.render.bind(this);\n    this.renderCss = this.renderCss.bind(this);\n    this.shadowRoot!.adoptedStyleSheets = [this.styleSheet];\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"attributes\") this.render();\n      });\n    });\n    observer.observe(this, { attributes: true });\n  }\n  connectedCallback() {\n    this.render();\n  }\n  renderCss() {\n    let styles: [bp: string, prop: string, val: string, psuedo: string][] = [\n      [\"0\", \"box-sizing\", \"border-box\", \"\"],\n    ];\n    const attributes = this.getAttributeNames();\n    for (let i = 0; i < attributes.length; i++) {\n      const attributeName = attributes[i];\n      const [attr, psuedo] = attributeName.split(\":\");\n      const [prop, bp = \"0\"] = attr.split(\"--\");\n      const value = (this as any).getAttribute(attributeName);\n      styles.push([bp, prop, value, psuedo]);\n    }\n    const renderedStyles = styles\n      .sort((a, b) => (a[3] ? 1 : -1)) // sort by psuedo\n      .sort((a, b) => Number(a[0]) - Number(b[0])) // sort by breakpoint\n      .map(\n        ([bp, prop, val, psuedo]) =>\n          `@media (min-width: ${bp}px) { :host${\n            psuedo ? `:${psuedo}` : \"\"\n          } { ${prop}:${val}; }}`\n      )\n      .join(\"\\n\");\n    return this.baseStyles + renderedStyles;\n  }\n  render() {\n    this.styleSheet.replace(this.renderCss());\n  }\n}\n\ncustomElements.define(\"dx-grid\", DomxGrid);\n"],
  "mappings": "mBAAO,IAAMA,EAAN,cAAuB,WAAY,CAIxC,aAAc,CACZ,MAAM,EAJR,gBAAqB,mDACrB,kBAAmD,CAAC,EACpD,gBAA4B,IAAI,cAG9B,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAClC,KAAK,WAAY,UAAY,gBAC7B,KAAK,OAAS,KAAK,OAAO,KAAK,IAAI,EACnC,KAAK,UAAY,KAAK,UAAU,KAAK,IAAI,EACzC,KAAK,WAAY,mBAAqB,CAAC,KAAK,UAAU,EACrC,IAAI,iBAAkBC,GAAc,CACnDA,EAAU,QAASC,GAAa,CAC1BA,EAAS,OAAS,cAAc,KAAK,OAAO,CAClD,CAAC,CACH,CAAC,EACQ,QAAQ,KAAM,CAAE,WAAY,EAAK,CAAC,CAC7C,CACA,mBAAoB,CAClB,KAAK,OAAO,CACd,CACA,WAAY,CACV,IAAIC,EAAoE,CACtE,CAAC,IAAK,aAAc,aAAc,EAAE,CACtC,EACMC,EAAa,KAAK,kBAAkB,EAC1C,QAASC,EAAI,EAAGA,EAAID,EAAW,OAAQC,IAAK,CAC1C,IAAMC,EAAgBF,EAAWC,GAC3B,CAACE,EAAMC,CAAM,EAAIF,EAAc,MAAM,GAAG,EACxC,CAACG,EAAMC,EAAK,GAAG,EAAIH,EAAK,MAAM,IAAI,EAClCI,EAAS,KAAa,aAAaL,CAAa,EACtDH,EAAO,KAAK,CAACO,EAAID,EAAME,EAAOH,CAAM,CAAC,CACvC,CACA,IAAMI,EAAiBT,EACpB,KAAK,CAACU,EAAGC,IAAOD,EAAE,GAAK,EAAI,EAAG,EAC9B,KAAK,CAACA,EAAGC,IAAM,OAAOD,EAAE,EAAE,EAAI,OAAOC,EAAE,EAAE,CAAC,EAC1C,IACC,CAAC,CAACJ,EAAID,EAAMM,EAAKP,CAAM,IACrB,sBAAsBE,eACpBF,EAAS,IAAIA,IAAW,QACpBC,KAAQM,OAClB,EACC,KAAK;AAAA,CAAI,EACZ,OAAO,KAAK,WAAaH,CAC3B,CACA,QAAS,CACP,KAAK,WAAW,QAAQ,KAAK,UAAU,CAAC,CAC1C,CACF,EAEA,eAAe,OAAO,UAAWZ,CAAQ",
  "names": ["DomxGrid", "mutations", "mutation", "styles", "attributes", "i", "attributeName", "attr", "psuedo", "prop", "bp", "value", "renderedStyles", "a", "b", "val"]
}
